{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#welcome-to-my-personal-site","title":"\ud83d\udc4b Welcome to My Personal Site","text":"<p>This is a page created by Michael Qiu.</p> C++PythonJava <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    cout &lt;&lt; \"Hello world!\" &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>times = 11.4\n\nwhile times &gt; 0:\n    print(\"Nice to see ya!\")\n    times -= 1\n</code></pre> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, Visitor!\");\n    }\n}\n</code></pre>"},{"location":"#about-me","title":"About Me","text":"<p>Currently an OIer.</p>"},{"location":"#find-me","title":"Find Me","text":"<p>This is my GitHub page: MichaelQiu</p> <p>This is my Luogu page: MikePP</p>"},{"location":"some-websites/","title":"Some Websites","text":""},{"location":"some-websites/#algorithms","title":"Algorithms","text":"<ul> <li>OI-Wiki (Chinese)</li> <li>Buggg\u7684\u5c0f\u5c4b (Chinese)</li> <li>Runoob (Chinese)</li> <li>VisuAlgo</li> <li>Bilibili - \u82f1\u96c4\u54ea\u91cc\u51fa\u6765 (Chinese)</li> </ul>"},{"location":"some-websites/#online-judges","title":"Online Judges","text":"<ul> <li>Luogu (Chinese)</li> <li>LeetCode</li> <li>CodeForces</li> <li>HDU OJ</li> </ul>"},{"location":"some-websites/#c","title":"C++","text":"<ul> <li>CPPReference</li> <li>ISOCPP</li> <li>Microsoft C++ &amp; C</li> <li>CPlusPlus</li> </ul>"},{"location":"some-websites/#ides","title":"IDEs","text":"<ul> <li>Visual Studio Code</li> <li>Visual Studio</li> <li>Xcode (Mac Only)</li> <li>PyCharm</li> <li>CLion</li> </ul>"},{"location":"algorithms/gcd-lcm/","title":"GCD & LCM","text":""},{"location":"algorithms/gcd-lcm/#stl","title":"STL","text":"<p>cppreference</p> Head FilesC++ Versionstd::gcdstd::lcm <pre><code>#include &lt;numeric&gt;\n</code></pre> <pre><code>-std=c++17\n</code></pre> <pre><code>template&lt; class M, class N &gt;\nconstexpr std::common_type_t&lt;M, N&gt; gcd( M m, N n );\n</code></pre> <pre><code>template&lt; class M, class N &gt;\nconstexpr std::common_type_t&lt;M, N&gt; lcm( M m, N n );\n</code></pre>"},{"location":"algorithms/gcd-lcm/#gcd","title":"GCD <sup>1</sup>","text":"Conditional OperatorBitwise Operation <pre><code>int gcd(int x, int y) {\n    return y&gt;0 ? gcd(y, x%y) : x;\n}\n</code></pre> <pre><code>int gcd(int x, int y) {\n    while (y^=x^=y^=x%=y);\n    return x;\n}\n</code></pre>"},{"location":"algorithms/gcd-lcm/#lcm","title":"LCM <sup>2</sup>","text":"<pre><code>int lcm(int x, int y) {\n    return a / gcd(x, y) * y;\n}\n</code></pre> <p>Tips</p> <p>Performing division before multiplication can help avoid overflow.</p> <ol> <li> <p>Greatest Common Divisor\u00a0\u21a9</p> </li> <li> <p>Least Common Multiple\u00a0\u21a9</p> </li> </ol>"},{"location":"algorithms/quick-pow/","title":"Quick Pow","text":"O(log n)<pre><code>long long qpow(long long a, const long long &amp;n, const long long &amp;m=1) {\n    if (n == 0) return 1;\n    else if (n == 1) return a;\n\n    long long tmp = qpow(a, n&gt;&gt;1, m);\n    if (n &amp; 1) return tmp * tmp * a % m;\n    else return tmp * tmp % m;\n}\n</code></pre>"},{"location":"algorithms/search/a-star/","title":"A*","text":""},{"location":"algorithms/search/a-star/#complexity","title":"Complexity","text":"<p>Time Complexity: $O((n+m) \\log m)$</p>"},{"location":"algorithms/search/a-star/#template","title":"Template","text":"Head FilesC++ Version <pre><code>#include &lt;vector&gt;\n#include &lt;queue&gt;\n#include &lt;utility&gt;\n#include &lt;algorithm&gt;\n</code></pre> <pre><code>-std=c++11\n</code></pre> Constants<pre><code>const int inf = 0x3f;\nconst int maxn = 1e4 + 5;\n</code></pre> struct<pre><code>struct edge {\n    int v, w;\n};\n\nstruct node {\n    int u, dis;\n\n    bool operator&gt;(const node &amp;x) const {\n        return dis &gt; x.dis;\n    }\n};\n\nvector&lt;edge&gt; e[maxn];\npair&lt;int, int&gt; coord[maxn];\n</code></pre> Manhattan distanceEuclidean Distance <pre><code>int heuristic(const pair&lt;int, int&gt; &amp;u, const pair&lt;int, int&gt; &amp;tg) {\n    return abs(u.first - tg.first) + abs(u.second - tg.second);\n}\n</code></pre> <pre><code>int heuristic(const pair&lt;int, int&gt; &amp;u, const pair&lt;int, int&gt; &amp;tg) {\n    return sqrt(pow(u.first - tg.first, 2) + pow(u.second - tg.second, 2)); // Euclidean distance\n}\n</code></pre> A*<pre><code>vector&lt;int&gt; a_star(const int &amp;sz, const int &amp;st, const int &amp;tg) {\n    vector&lt;int&gt; dis(sz+1, inf);\n    vector&lt;int&gt; prev(sz+1, -1);\n    priority_queue&lt; node, vector&lt;node&gt;, greater&lt;node&gt; &gt; pq;\n\n    dis[st] = 0;\n    pq.emplace((node){st, 0});\n\n    while (!pq.empty()) {\n        int u = pq.top().u; pq.pop();\n\n        if (u == tg) break;\n\n        for (const auto &amp;ed : e[u]) {\n            int v = ed.v, w = ed.w;\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                pq.emplace((node){v, dis[v]+heuristic(coord[u], coord[tg])});\n            }\n        }\n    }\n\n    vector&lt;int&gt; path;\n    if (dis[tg] != inf) {\n        for (int i = tg; i != -1; i = prev[i]) {\n            path.emplace_back(i);\n        }\n        reverse(path.begin(), path.end());\n    }\n    return path;\n}\n</code></pre>"},{"location":"algorithms/shortest-path/bellman-ford/","title":"Bellman Ford","text":""},{"location":"algorithms/shortest-path/bellman-ford/#video-recommendation","title":"Video Recommendation","text":"<ul> <li>4.4 Bellman Ford Algorithm - Single Source Shortest Path - Dynamic Programming - Adbul Bari</li> </ul>"},{"location":"algorithms/shortest-path/bellman-ford/#template","title":"Template","text":"Head FilesC++ Version <pre><code>#include &lt;vector&gt;\n</code></pre> <pre><code>-std=c++11\n</code></pre> Constants<pre><code>const int inf = 0x3f;\nconst int maxn = 1e4 + 5;\n</code></pre> struct<pre><code>struct edge {\n    int v, w;\n};\n\nstruct node {\n    int u, dis;\n\n    bool operator&gt;(const node &amp;x) const {\n        return dis &gt; x.dis;\n    }\n};\n\nvector&lt;edge&gt; e[maxn];\n</code></pre> Bellman Ford<pre><code>void bellman_ford(const int &amp;sz, const int &amp;st) {\n    vector&lt;int&gt; dis(sz+1, inf);\n    dis[st] = 0;\n\n    bool flag;\n    for (int i=1; i&lt;=sz; ++i) {\n        flag = 0;\n        for (int u=1; u&lt;=sz; ++u) {\n            for (auto &amp;e : e[u]) {\n                int v = e.v, w = e.w;\n                if (dis[v] &gt; dis[u] + w) {\n                    dis[v] = dis[u] + w;\n                    flag = 1;\n                }\n            }\n        }\n\n        if (!flag) return;\n    }\n}\n</code></pre>"},{"location":"algorithms/shortest-path/dijkstra/","title":"Dijkstra (prioirty_queue)","text":""},{"location":"algorithms/shortest-path/dijkstra/#video-recommendation","title":"Video Recommendation","text":"<ul> <li>3.6 Dijkstra Algorithm - Single Source Shortest Path - Greedy Method - Abdul Bari</li> <li>\u3010C++\u3011\u5355\u6e90\u6700\u77ed\u8defDijkstra-\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5</li> </ul>"},{"location":"algorithms/shortest-path/dijkstra/#complexity","title":"Complexity","text":"<p>Time Complexity: $O(m \\log m)$</p>"},{"location":"algorithms/shortest-path/dijkstra/#template","title":"Template","text":"Head FilesC++ Version <pre><code>#include &lt;vector&gt;\n#include &lt;queue&gt;\n</code></pre> <pre><code>-std=c++11\n</code></pre> Constants<pre><code>const int inf = 0x3f;\nconst int maxn = 1e4 + 5;\n</code></pre> struct<pre><code>struct edge {\n    int v, w;\n};\n\nstruct node {\n    int u, dis;\n\n    bool operator&gt;(const node &amp;x) const {\n        return dis &gt; x.dis;\n    }\n};\n\nvector&lt;edge&gt; e[maxn];\n</code></pre> priority_queue Template<pre><code>vector&lt;int&gt; dijkstra(const int &amp;sz, const int &amp;st) {\n    vector&lt;int&gt; dis(sz+1, inf);\n    vector&lt;bool&gt; vis(sz+1, 0);\n    priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; pq;\n\n    dis[st] = 0;\n    pq.emplace((node){st, 0});\n\n    while (!pq.empty()) {\n        int u = pq.top().u; pq.pop();\n        if (vis[u]) continue;\n        vis[u] = 1;\n\n        for (const auto &amp;ed : e[u]) {\n            int v = ed.v, w = ed.w;\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                pq.emplace((node){v, dis[v]});\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"algorithms/shortest-path/dijkstra/#problems","title":"Problems","text":"<p>Luogu</p> Solution <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int maxn = 1e5 + 2;\nconst int inf = 0x3f3f3f3f;\n\nstruct edge {\n    int v, w;\n}; vector&lt;edge&gt; e[maxn];\n\nstruct node {\n    int u, dis;\n\n    bool operator&gt;(const node &amp;x) const {\n        return dis &gt; x.dis;\n    } \n};\n\nint n, m, s;\n\nvoid dijkstra(const int &amp;sz, const int &amp;st) {\n    vector&lt;int&gt; dis(sz+1, inf);\n    vector&lt;bool&gt; vis(sz+1, 0);\n    priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; pq;\n\n    dis[st] = 0;\n    pq.push((node){st, 0});\n    while (!pq.empty()) {\n        int u = pq.top().u; pq.pop();\n        if (vis[u]) continue;\n        vis[u] = 1;\n\n        for (const auto &amp;ed : e[u]) {\n            int v = ed.v, w = ed.w;\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                pq.push((node){v, dis[v]});\n            }\n        }\n    }\n\n    for (int i=1; i&lt;=n; ++i) {\n        cout &lt;&lt; dis[i] &lt;&lt; (i == n ? \"\\n\" : \" \");\n    }\n}\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n    for (int i=1; i&lt;=m; ++i) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n\n        e[u].push_back((edge){v, w});\n    }\n\n    dijkstra(n, s);\n}\n</code></pre>"},{"location":"algorithms/shortest-path/floyd/","title":"Floyd","text":""},{"location":"algorithms/shortest-path/floyd/#complexity","title":"Complexity","text":"<p>Time Complexity: $O(n^3)$</p> <p>Space Complexity: $O(n^2)$</p> Floyd<pre><code>void floyd(int dis[][], int sz) {\n    for (int k=1; i&lt;=sz; ++i) {\n        for (int x=1; x&lt;=sz; ++x) {\n            for (int y=1; y&lt;=sz; ++y) {\n                dis[x][y] = min(dis[x][y], dis[x][k] + dis[k][y]);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"algorithms/shortest-path/floyd/#problems","title":"Problems","text":""},{"location":"algorithms/shortest-path/floyd/#luogu-p119","title":"Luogu P119 \u707e\u540e\u91cd\u5efa","text":"Solution <pre><code>#include &lt;bits/stdc++.h&gt;\n#define endl \"\\n\"\nusing namespace std;\nconst int maxn = 202;\nconst int maxm = 20000;\nconst int inf = 0x3f3f3f3f;\n\nint n, m;\nvector&lt; vector&lt;int&gt; &gt; adj(maxn, vector&lt;int&gt;(maxn, inf));\nvector&lt;int&gt; t(maxn, 0);\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for (int i=0; i&lt;n; ++i) {\n        adj[i][i] = 0;\n    }\n\n    for (int i=0; i&lt;n; ++i) {\n        cin &gt;&gt; t[i];\n    } for (int i=0; i&lt;m; ++i) {\n        int x, y, z;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        adj[x][y] = adj[y][x] = z;\n    }\n\n    int Q; cin &gt;&gt; Q;\n    int last = 0; // last accessed time\n    while (Q--) {\n        int x, y, z;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n\n        if (t[x] &gt; z || t[y] &gt; z) {cout &lt;&lt; -1 &lt;&lt; endl; continue;}\n\n        while (last &lt; n &amp;&amp; t[last] &lt;= z) {\n            // Floyd\n            for (int i=0; i&lt;n; ++i) {\n                for (int j=0; j&lt;n; ++j) {\n                    adj[i][j] = min(adj[i][j], adj[i][last] + adj[last][j]);\n                }\n            }\n            ++last;\n        }\n\n        cout &lt;&lt; (adj[x][y] == inf ? -1 : adj[x][y]) &lt;&lt; endl;\n    }\n} \n</code></pre>"},{"location":"algorithms/shortest-path/spfa/","title":"SPFA","text":""},{"location":"algorithms/shortest-path/spfa/#complexity","title":"Complexity","text":"<p>Time Complexity: $O(nm)$</p>"},{"location":"algorithms/shortest-path/spfa/#template","title":"Template","text":"Head FilesC++ Version <pre><code>#include &lt;vector&gt;\n#include &lt;queue&gt;\n</code></pre> <pre><code>-std=c++11\n</code></pre> Constants<pre><code>const int inf = 0x3f;\nconst int maxn = 1e4 + 5;\n</code></pre> struct<pre><code>struct edge {\n    int v, w;\n};\nvector&lt;edge&gt; e[maxn];\n</code></pre> Template<pre><code>vector&lt;int&gt; spfa(const int &amp;sz, const int &amp;st) {\n    vector&lt;int&gt; dis(maxn, inf);\n    vector&lt;bool&gt; vis(maxn, 0);\n    queue&lt;int&gt; q;\n\n    dis[st] = 0;\n    vis[st] = 1;\n    q.push(st);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        vis[u] = 0;\n\n        for (const auto &amp;ed : e[u]) {\n            int v = ed.v, w = ed.w;\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n    }\n\n    return dis;\n}\n</code></pre>"},{"location":"algorithms/shortest-path/spfa/#problems","title":"Problems","text":"<p>Luogu P3371</p> Solution <pre><code>#include &lt;bits/stdc++.h&gt;\n#define int unsigned long long\nusing namespace std;\nconst int maxn = 2e5 + 2;\nconst int inf = (1ull&lt;&lt;31) - 1;\n\nstruct edge {\n    int v, w;\n};\nvector&lt;edge&gt; e[maxn];\n\nvoid spfa(const int &amp;sz, const int &amp;st) {\n    vector&lt;int&gt; dis(maxn, inf);\n    vector&lt;bool&gt; vis(maxn, 0);\n    queue&lt;int&gt; q;\n\n    dis[st] = 0;\n    vis[st] = 1;\n    q.push(st);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        vis[u] = 0;\n\n        for (const auto &amp;ed : e[u]) {\n            int v = ed.v, w = ed.w;\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n    }\n\n    for (int i=1; i&lt;=sz; ++i) {\n        cout &lt;&lt; dis[i] &lt;&lt; \" \";\n    }\n}\n\nint n, m, s;\n\nsigned main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n    for (int i=1; i&lt;=m; ++i) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        e[u].push_back((edge){v, w}); \n    }\n\n    spfa(n, s);\n}\n</code></pre>"},{"location":"algorithms/sort/bubble-sort/","title":"Bubble sort","text":"<pre><code>    template &lt;typename Type&gt;\n    void Bubble(Type arr[], int n) {\n    assert(sizeof(arr) / sizeof(Type) != n);\n\n    int loop = 0;\n    for (int i=1; i&lt;n-1; ++i) {\n        bool sorted = 1;\n        for (int j=1; j&lt;n; ++j) {\n            if (arr[j] &lt; arr[j - 1]) {\n                swap(arr[j], arr[j - 1]);\n                sorted = 0;\n            }\n\n            ++loop;\n        }\n\n        if (sorted) {\n            break;\n        }\n    }\n}\n</code></pre>"},{"location":"algorithms/sort/radix-sort/","title":"Radix sort","text":""},{"location":"algorithms/sort/radix-sort/#video-recommendation","title":"Video Recommendation","text":"<ul> <li>\u3010\u6392\u5e8f\u7b97\u6cd5\u3011\u57fa\u6570\u6392\u5e8f\u3011</li> </ul>"},{"location":"algorithms/sort/radix-sort/#complexity","title":"Complexity","text":"<p>$O(n)$ or $O(n \\lg n)$</p>"},{"location":"algorithms/sort/radix-sort/#template","title":"Template","text":""},{"location":"algorithms/sort/sort-overview/","title":"Sort Overview","text":""},{"location":"algorithms/sort/sort-overview/#sort-algorithms","title":"Sort Algorithms","text":"Algorithms Time Complexity Bubble Sort $O(n^2)$ Insertion Sort $O(n^2)$ Selection Sort $O(n^2)$ Quick Sort $O(n \\log n) \\rightarrow O(n^2)$ Merge Sort $O(n \\log n)$ Heap Sort $O(n \\log n)$ Bucket Sort $O(n + n^2/k + k) \\rightarrow O(n^2)$ Radix Sort $O(n)$ <code>std::sort()</code> $O(n \\log n)$"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2024/09/14/deploy-ai-models-locally/","title":"Deploy AI Models Locally","text":""},{"location":"blog/2024/09/14/deploy-ai-models-locally/#ollama","title":"Ollama","text":""},{"location":"blog/2024/09/14/deploy-ai-models-locally/#what-is-ollama","title":"What Is Ollama?","text":"<p>Ollama is an open-source platform designed to make large language models (LLMs) more accessible and usable.</p>"},{"location":"blog/2024/09/14/deploy-ai-models-locally/#how-to-deploy","title":"How to Deploy","text":"<ol> <li>Visit Ollama and download.</li> <li>Choose a model you like</li> <li>Run <code>ollama run YourModel:ParameterSize</code> in the terminal or Windows CMD (Windows: Win+R $\\rightarrow$ cmd)</li> <li>Your model will start downloading. If the model has already been downloaded, you will go to the chat page (starts with <code>&gt;&gt;&gt;</code>);</li> </ol>"},{"location":"blog/2024/09/14/deploy-ai-models-locally/#how-to-choose-an-appropriate-model","title":"How to Choose An Appropriate Model","text":""},{"location":"blog/2024/09/14/deploy-ai-models-locally/#choose-model","title":"Choose Model","text":"<p>Visit Model Library</p> <p>Here is the Aritificial Analysis's LLM Leaderboard</p> <p>Recommendations:</p> <ul> <li>Google Gemma 2</li> <li>Meta Llama 3.1</li> <li>Alibaba Qwen2</li> </ul>"},{"location":"blog/2024/09/14/deploy-ai-models-locally/#choose-parameter-size","title":"Choose Parameter Size","text":"<p>The model size should be smaller than your memory size.</p> <p>For instance, the <code>gemma2:9b</code> model is 5.4GB which is runnable on devices with 16GB memory.</p> <p>However, the <code>gemma2:27b</code> model is 16GB and it is not runnable on the same device (there must be some other programs that eat up your memory).</p>"},{"location":"blog/2024/09/14/deploy-ai-models-locally/#drawbacks-of-running-in-terminal","title":"Drawbacks of Running in Terminal","text":"<p>Your chat history cannot be saved. If you want to store your history chat, deploy one of the following apps (the titles link to their GitHub Repos):</p> <ul> <li>Enchanted (macOS Only)</li> <li>Open WebUI</li> </ul>"},{"location":"blog/2024/09/14/deploy-ai-models-locally/#enchanted","title":"Enchanted","text":"<p>Download in AppStore</p>"},{"location":"blog/2024/09/14/deploy-ai-models-locally/#open-webui","title":"Open WebUI","text":"<ol> <li>Download Docker</li> <li>Follow the Instructions</li> </ol>"},{"location":"blog/2024/09/14/deploy-ai-models-locally/#moa","title":"MoA","text":"<p>Together MoA Repo</p> <p>Mixture of Agents (MoA) is a novel approach that leverages the collective strengths of multiple LLMs to enhance performance, achieving state-of-the-art results.</p> <p></p> <p>The original MoA does not support Ollama. Here is my edited Ollama version of MoA forked from severian42's MoA-Ollama-Chat. I edited the GUI to make it look better.</p> <p>Follow the Instructions here.</p>"},{"location":"blog/2024/10/01/musicgpt/","title":"MusicGPT","text":""},{"location":"blog/2024/10/01/musicgpt/#musicgpt","title":"MusicGPT","text":"<p>gabotechs's MusciGPT Repo</p> <p>You can generate music using natural language prompts locally on MusicGPT.</p>"},{"location":"blog/2024/10/01/musicgpt/#install","title":"Install","text":"<p>Official Instruction</p>"},{"location":"blog/2024/10/01/musicgpt/#usage","title":"Usage","text":"<p>Execute the following command in terminal:</p> <pre><code>musicgpt\n</code></pre>"},{"location":"blog/2024/10/01/musicgpt/#samples","title":"Samples","text":"<p>Create a prog rock song with space rock elements</p> <p></p> <p>Create a relaxing jazz song</p> <p></p> <p>Create epic, atmospheric music with soaring strings, synths, and organ. Evoking transcendence, build intensity gradually.</p> <p></p> <p>Note</p> <p>When running the default <code>musicgpt</code> model (small), the maximum duration of audio is 29 seconds.</p> <p>Also, it is NOT able to generate vocal sounds.</p>"},{"location":"data-structures/bignum/","title":"Bignum","text":""},{"location":"data-structures/binary-heap/","title":"Binary Heap","text":"<p>Time Complexity:</p> <ul> <li>Emplace: $O(\\log n)$</li> <li>Pop: $O(\\log n)$</li> </ul> Head FilesC++ Version <pre><code>#include &lt;cstddef&gt;\n#include &lt;algorithm&gt;\n</code></pre> <pre><code>-std=c++11\n</code></pre> Template<pre><code>template &lt;typename Type, size_t Size&gt;\nclass heap {\nprivate:\n    int cnt;\n    Type val[Size];\n\npublic:\n    heap() {cnt=0;}\n\n    void emplace(int x) {\n        val[++cnt] = x;\n        int now = cnt;\n\n        while (now){\n            int fa = now &gt;&gt; 1;\n\n            if (val[fa] &gt; val[now]) {\n                swap(val[fa], val[now]);\n            } else {\n                break;\n            }\n\n            now = fa;\n        }\n    }\n\n    void pop() {\n        swap(val[cnt--], val[1]);\n\n        int now = 1;\n        while ((now &lt;&lt; 1) &lt;= cnt) { \n            int ls = now &lt;&lt; 1;\n\n            if (ls+1 &lt;= cnt &amp;&amp; val[ls+1] &lt; val[ls]) {\n                ++ls;\n            }\n            if (val[ls] &lt; val[now]) {\n                swap(val[now], val[ls]);\n            } else {\n                break;\n            }\n\n            now = ls;\n        }\n    }\n\n    int size() {\n        return cnt; \n    }\n\n    bool empty() {\n        return cnt == 0;\n    }\n\n    Type top() {\n        return val[1];\n    }\n};\n</code></pre>"},{"location":"data-structures/disjoint-set-union/","title":"Disjoint Set Union","text":"Head Files <pre><code>#include &lt;vector&gt;\n</code></pre> Template<pre><code>class dsu {\nprivate:\n    vector&lt;int&gt; fa;\n\npublic:\n    dsu(const int &amp;sz) {\n        fa.resize(sz+1, -1);\n\n        for (int i=1; i&lt;=sz; ++i) {\n            fa[i] = i;\n        }\n    }\n\n    int find(const int &amp;x) {\n        return fa[x] == x ? x : fa[x] = find(fa[x]);\n    }\n\n    void merge(const int &amp;x, const int &amp;y) {\n        fa[find(x)] = find(y);\n    }\n};\n</code></pre>"},{"location":"data-structures/segment-tree/","title":"Segment Tree","text":"<p>Time Complexity:</p> <ul> <li>Build: $O(n)$</li> <li>Query: $O(\\log n)$</li> <li>Update: $O(\\log n)$</li> <li>Modify: $O(\\log n)$</li> </ul> Head FilesC++ Version <pre><code>#include &lt;vector&gt;\n#include &lt;functional&gt;\n</code></pre> <pre><code>-std=c++11\n</code></pre> Template<pre><code>template&lt;typename Type&gt;\nclass segment_tree {\nusing func_type = function&lt;Type(const Type &amp;, const Type &amp;)&gt;;\nprivate:\n    vector&lt;Type&gt; val;\n    vector&lt;Type&gt; add_tag;\n    vector&lt;Type&gt; set_tag;\n    vector&lt;bool&gt; is_set;\n    int len;\n\n    inline int ls(const int &amp;x) { return x &lt;&lt; 1; }\n    inline int rs(const int &amp;x) { return x &lt;&lt; 1 | 1; }\n\n    func_type opr;\n    static Type default_func_type(const Type &amp;x, const Type &amp;y) { return x + y; }\n\n    void push_up(const int &amp;x) {\n        val[x] = opr(val[ls(x)], val[rs(x)]);\n    }\n\n    void add_tag_func(const int &amp;x, const int &amp;l, const int &amp;r, const Type &amp;d) {\n        add_tag[x] += d;\n        val[x] += d * (r - l + 1);\n    }\n\n    void set_tag_func(const int &amp;x, const int &amp;l, const int &amp;r, const Type &amp;d) {\n        set_tag[x] = d;\n        val[x] = d * (r - l + 1);\n        add_tag[x] = 0;\n        is_set[x] = true;\n    }\n\n    void push_down(const int &amp;x, const int &amp;l, const int &amp;r) {\n        int mid = (l + r) &gt;&gt; 1;\n        if (is_set[x]) {\n            set_tag_func(ls(x), l, mid, set_tag[x]);\n            set_tag_func(rs(x), mid + 1, r, set_tag[x]);\n            is_set[x] = false;\n        }\n        if (add_tag[x] != 0) {\n            add_tag_func(ls(x), l, mid, add_tag[x]);\n            add_tag_func(rs(x), mid + 1, r, add_tag[x]);\n            add_tag[x] = 0;\n        }\n    }\n\n    void build(const vector&lt;Type&gt; &amp;s, const int &amp;x, const int &amp;l, const int &amp;r) {\n        add_tag[x] = 0;\n        set_tag[x] = 0;\n        is_set[x] = false;\n        if (l == r) {\n            val[x] = s[l];\n            return;\n        }\n\n        int mid = (l + r) &gt;&gt; 1;\n        build(s, ls(x), l, mid);\n        build(s, rs(x), mid + 1, r);\n        push_up(x);\n    }\n\n    Type query(const int &amp;L, const int &amp;R, const int x, const int &amp;l, const int &amp;r) {\n        if (L &lt;= l &amp;&amp; r &lt;= R) return val[x];\n        push_down(x, l, r);\n\n        Type res = Type();\n        int mid = (l + r) &gt;&gt; 1;\n\n        if (L &lt;= mid) res = opr(res, query(L, R, ls(x), l, mid));\n        if (R &gt; mid) res = opr(res, query(L, R, rs(x), mid + 1, r));\n\n        return res;\n    }\n\n    void update(const int &amp;L, const int &amp;R, const int &amp;x, const int &amp;l, const int &amp;r, const Type &amp;d) {\n        if (L &lt;= l &amp;&amp; r &lt;= R) {\n            add_tag_func(x, l, r, d);\n            return;\n        }\n\n        push_down(x, l, r);\n        int mid = (l + r) &gt;&gt; 1;\n        if (L &lt;= mid) update(L, R, ls(x), l, mid, d);\n        if (R &gt; mid) update(L, R, rs(x), mid + 1, r, d);\n\n        push_up(x);\n    }\n\n    void modify(const int &amp;L, const int &amp;R, const int &amp;x, const int &amp;l, const int &amp;r, const Type &amp;d) {\n        if (L &lt;= l &amp;&amp; r &lt;= R) {\n            set_tag_func(x, l, r, d);\n            return;\n        }\n\n        push_down(x, l, r);\n        int mid = (l + r) &gt;&gt; 1;\n        if (L &lt;= mid) modify(L, R, ls(x), l, mid, d);\n        if (R &gt; mid) modify(L, R, rs(x), mid + 1, r, d);\n\n        push_up(x);\n    }\n\npublic:\n    segment_tree(vector&lt;Type&gt; v, func_type _opr = default_func_type) {\n        val.resize(v.size() &lt;&lt; 2, Type());\n        add_tag.resize(v.size() &lt;&lt; 2, Type());\n        set_tag.resize(v.size() &lt;&lt; 2, Type());\n        is_set.resize(v.size() &lt;&lt; 2, false);\n        len = v.size();\n        opr = _opr;\n\n        v.insert(v.begin(), Type());\n        build(v, 1, 1, len);\n    }\n\n    int size() const {\n        return len;\n    }\n\n    Type query(const int &amp;L, const int &amp;R) {\n        return query(L, R, 1, 1, len);\n    }\n\n    void update(const int &amp;L, const int &amp;R, const Type &amp;d) {\n        update(L, R, 1, 1, len, d);\n    }\n\n    void modify(const int &amp;L, const int &amp;R, const Type &amp;d) {\n        modify(L, R, 1, 1, len, d);\n    }\n};\n</code></pre> Usage<pre><code>signed main() {\n    vector&lt;int&gt; a;\n    int b[]={5, 4, 3, 2, 1};\n\n    for (int i=0; i&lt;5; ++i) {\n        a.emplace_back(b[i]);\n    }\n    segment_tree&lt;int&gt; sg(a);\n\n    cout &lt;&lt; sg.query(1, 4) &lt;&lt; endl;\n    sg.update(1, 2, 2);\n    cout &lt;&lt; sg.query(1, 4) &lt;&lt; endl;\n    sg.modify(1, 2, 2);\n    cout &lt;&lt; sg.query(1, 4) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"data-structures/sparse-table/","title":"Sparse Table","text":"<p>Time Complexity:</p> <ul> <li>Build: $O(n \\log n)$</li> <li>Query: $O(1)$</li> </ul> Head FilesC++ Version <pre><code>#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;functional&gt;\n#include &lt;cmath&gt;\n</code></pre> <pre><code>-std=c++11\n</code></pre> build log2 table<pre><code>vector&lt;int&gt; _log2;\nvoid build_log2(int x) {\n    if (x &lt; _log2.size()) return;\n\n    _log2.resize(x+1);\n    _log2[1] = 0;\n    for (int i=2; i&lt;=x; ++i) {\n        _log2[i] = _log2[i &gt;&gt; 1] + 1;\n    }\n}\n</code></pre> sparse_table<pre><code>template&lt;typename Type&gt;\nclass sparse_table {\nusing func_type = function&lt;Type(const Type &amp;, const Type &amp;)&gt;;\nprivate:\n    vector&lt; vector&lt;Type&gt; &gt; val;\n    static Type default_func_type(const Type &amp;x, const Type &amp;y) { return max(x, y); }\n    func_type opr;\n\npublic:\n    sparse_table(const vector&lt;Type&gt; &amp;v, func_type _opr = default_func_type) {\n        opr = _opr;\n        int row = v.size();\n\n        if (_log2.empty()) { build_log2(row); }\n\n        int col = ceil(_log2[row]) + 1;\n\n        val.assign(row, vector&lt;Type&gt;(col, 0));\n        for (int i=0; i&lt;row; ++i) {\n            val[i][0] = v[i];\n        }\n        for (int j=1; j&lt;col; ++j) {\n            int _j = (1 &lt;&lt; (j-1));\n            for (int i=0; i + _j &lt; row; ++i) {\n                val[i][j] = opr(val[i][j-1], val[i + (1 &lt;&lt; (j-1))][j-1]);\n            }\n        }\n    }\n\n    Type query(int l, int r) {\n        --l; --r;\n        int len = r-l+1;\n        int q = floor(_log2[len]);\n        return opr(val[l][q], val[r - (1 &lt;&lt; q) + 1][q]);\n    }\n};\n</code></pre>"},{"location":"data-structures/stack/","title":"Stack","text":"<p>Time Complexity:</p> <ul> <li>Emplace $O(1)$</li> <li>Pop: $O(1)$</li> </ul> mystack<pre><code>template &lt;typename Type, size_t Size&gt;\nclass mystack {\nprivate:\n    int cnt;\n    Type val[Size];\n\npublic:\n    mystack() {cnt=0;}\n\n    void emplace(int x) {\n        val[++cnt] = x;\n    }\n\n    void pop() {\n        --cnt;\n    }\n\n    Type top() {\n        return val[cnt];\n    }\n\n    bool empty() {\n        return cnt == 0;\n    }\n\n    void clear() {\n        cnt = 0;\n    }\n}\n</code></pre>"},{"location":"data-structures/tree/binary-tree-traversals/","title":"Binary Tree Traversals","text":"node<pre><code>struct node {\n    int val;\n    node *ls, *rs;\n}\n</code></pre>"},{"location":"data-structures/tree/binary-tree-traversals/#preorder-traversal","title":"Preorder Traversal","text":"<pre><code>void preorder(node *rt) {\n    cout &lt;&lt; rt -&gt; val &lt;&lt; endl;\n    preorder(rt -&gt; ls);\n    preorder(rt -&gt; rs);\n}\n</code></pre>"},{"location":"data-structures/tree/binary-tree-traversals/#inorder-traversal","title":"Inorder Traversal","text":"<pre><code>void inorder(node *rt) {\n    inorder(rt -&gt; ls);\n    cout &lt;&lt; rt -&gt; val &lt;&lt; endl;\n    inorder(rt -&gt; rs);\n}\n</code></pre>"},{"location":"data-structures/tree/binary-tree-traversals/#postorder-traversal","title":"Postorder Traversal","text":"<pre><code>void postorder(node *rt) {\n    postorder(rt -&gt; ls);\n    postorder(rt -&gt; rs);\n    cout &lt;&lt; rt -&gt; val &lt;&lt; endl;\n}\n</code></pre>"},{"location":"data-structures/tree/binary-tree-traversals/#get-preorder-traversal","title":"Get Preorder Traversal","text":""},{"location":"oi-tips/-qread-and-qwrite/","title":"qread and qwrite","text":""},{"location":"oi-tips/-qread-and-qwrite/#most-common-quick-read-write-function","title":"Most Common Quick Read &amp; Write Function","text":""},{"location":"oi-tips/-qread-and-qwrite/#quick-read-getchar","title":"Quick Read <code>getchar()</code>","text":"<p>head file: <code>&lt;cctype&gt;</code></p> intAll TypesMulti-Var <pre><code>int read() {\n    int x=0, f=1; char ch=getchar();\n    while (!isdigit(ch)) f = ((ch=='-') ? -1 : f);\n    while (isdigt(ch)) x = (x&lt;&lt;1) + (x&lt;&lt;3) + (ch ^ 48), ch = getchar();\n    return x * f;\n}\n</code></pre> <pre><code>template&lt;typename type&gt;\nvoid read(type &amp;x) {\n    x=0; bool f(0); char ch=getchar();\n    while(!isdigit(ch)) f = ch =='-', ch =getchar();\n    while(isdigit(ch)) x = (x&lt;&lt;1) + (x&lt;&lt;3) + (ch^48), ch=getchar();\n    f ? x=-x : 0;\n}\n</code></pre> <pre><code>template&lt;typename type, typename ..._type&gt;\nvoid read(type &amp;x, _type&amp;...y) {read(x), read(y);}\n</code></pre> <p>Add code above under the \"All Types\" code.</p>"},{"location":"oi-tips/-qread-and-qwrite/#quick-write-putchar","title":"Quick Write <code>putchar()</code>","text":"intAll Types <pre><code>void write(int x) {\n    x&lt;0 ? x=-x, putchar('-') : 0;\n    x&gt;9 ? putchar(x/10) : 0;\n    putchar(x%10|48);\n}\n</code></pre> <p>head file: <code>&lt;cctype&gt;</code></p> <pre><code>template&lt;typename type&gt;\nvoid write(type x, bool md=1) {\n    x&lt;0 ? x=-x, putchar('-') : 0; static short bf[50], tp(0);\n    do bf[++tp] = x%10, x /= 10; while(x);\n    while(tp) putchar(bf[tp--]|48);\n    md ? putchar('\\n') : putchar(' ');\n}\n</code></pre> <p>md=0 for space</p> <p>md=1 for new line</p>"},{"location":"oi-tips/-qread-and-qwrite/#even-faster-fread","title":"Even Faster: <code>fread()</code>","text":"<p>We will just need to modify the <code>getchar()</code> function in the qread template above.</p>"},{"location":"oi-tips/-qread-and-qwrite/#fread","title":"<code>fread()</code>","text":"Since C99<pre><code>size_t fread( void *restrict buffer, size_t size, size_t count,\n    FILE *restrict stream );\n</code></pre>"},{"location":"oi-tips/-qread-and-qwrite/#parameters","title":"Parameters","text":"<p>buffer  -   pointer to the array where the read objects are stored</p> <p>size    -   size of each object in bytes</p> <p>count   -   the number of the objects to be read</p> <p>stream  -   the stream to read</p>"},{"location":"oi-tips/-qread-and-qwrite/#return-value","title":"Return Value","text":"<p>Number of objects read successfully, which may be less than <code>count</code> if an error or end-of-file condition occurs.</p> <p>If <code>size</code> or <code>count</code> is zero, fread returns zero and performs no other action.</p> <p>fread does not distinguish between end-of-file and error, and callers must use feof and ferror to determine which occurred.</p>"},{"location":"oi-tips/-qread-and-qwrite/#new-variables-needed","title":"New Variables Needed","text":"<pre><code>char buf[1&lt;&lt;20], *p1=buf, *p2=buf;\n</code></pre> <ul> <li><code>buf</code>: buffer.</li> <li><code>p1</code>: points to the currently read element.</li> <li><code>p2</code>: points to the end of the buffer.</li> </ul>"},{"location":"oi-tips/-qread-and-qwrite/#redefined-getchars-function","title":"Redefined <code>getchars()</code> Function","text":"<pre><code>#define getchar() (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;20,stdin),p1==p2)?EOF:*p1++)\n</code></pre>"},{"location":"oi-tips/-qread-and-qwrite/#even-faster-fwrite","title":"Even Faster: <code>fwrite</code>","text":"<p>We will just need to modify the <code>putchar()</code> function in the qread template above.</p>"},{"location":"oi-tips/-qread-and-qwrite/#fwrite","title":"<code>fwrite()</code>","text":"<pre><code>size_t fwrite( const void* restrict buffer, size_t size, size_t count,\n    FILE* restrict stream );\n</code></pre>"},{"location":"oi-tips/-qread-and-qwrite/#parameters_1","title":"Parameters","text":"<p>buffer  -   pointer to the first object in the array to be written</p> <p>size    -   size of each object</p> <p>count   -   the number of the objects to be written</p> <p>stream  -   pointer to the output stream</p>"},{"location":"oi-tips/-qread-and-qwrite/#return-value_1","title":"Return Value","text":"<p>Number of objects read successfully, which may be less than <code>count</code> if an error or end-of-file condition occurs.</p> <p>If <code>size</code> or <code>count</code> is zero, fread returns zero and performs no other action.</p> <p>fread does not distinguish between end-of-file and error, and callers must use feof and ferror to determine which occurred.</p>"},{"location":"oi-tips/-qread-and-qwrite/#new-variables-needed_1","title":"New Variables Needed","text":"<pre><code>char buf[1&lt;&lt;20], *p3=buf;\n</code></pre>"},{"location":"oi-tips/-qread-and-qwrite/#redefined-putchar-function","title":"Redefined <code>putchar()</code> Function","text":"<p>We implement a <code>flush()</code> function to output the buffer, so that it can be called many times in the future.</p> flush() Function<pre><code>#define flush() (fwrite(p3=out,1,1&lt;&lt;20,stdout))\n</code></pre> <p>You can actually take advantage of the principle of calling destructors at the end of a program by defining a class that calls flush() at the end of the program.</p> Destructor flush()<pre><code>class Flush{public:~Flush(){flush();}}_;\n</code></pre> <p>Now here's the redefined <code>putchar()</code> function </p>The Redefined putchar() Function<pre><code>#define putchar(ch) (p3==out+SIZE&amp;&amp;flush(),*p3++=(ch))\n</code></pre>"},{"location":"oi-tips/accelerate-ios/","title":"iostream Acceleration","text":""},{"location":"oi-tips/accelerate-ios/#untie","title":"Untie","text":"<pre><code>ios::sync_with_stdio(0);\ncin.tie(0);\ncout.tie(0);\n</code></pre> <p>Tip</p> <p>The untied cin &amp; cout are actually faster than scanf &amp; printf.</p> <p>Warning</p> <p>You CANNOT use functions in <code>&lt;stdio&gt;</code> after untie, including <code>printf()</code>, <code>scanf()</code>, <code>puts()</code>, <code>freopen()</code>.</p>"},{"location":"oi-tips/accelerate-ios/#endl","title":"endl","text":"<p>endl can be about 10 times slower than the \"\\n\".</p> <pre><code>#define endl '\\n'\n</code></pre>"},{"location":"oi-tips/elapsed-time/","title":"Elapsed Time Measurement","text":"Head File<pre><code>#include &lt;chrono&gt;\n</code></pre> global variables<pre><code>auto chrono_start_time = chrono::high_resolution_clock::now();\n</code></pre> Start Measuring<pre><code>void start_measuring() {\n    chrono_start_time = chrono::high_resolution_clock::now();\n}\n</code></pre> MillisecondsSecondsMinutes End Measuring<pre><code>void end_measuring() {\n    auto chrono_end_time = chrono::high_resolution_clock::now();\n    chrono::duration&lt;double, milli&gt; chrono_elapsed_seconds = chrono_end_time - chrono_start_time;\n    double chrono_elapsed_ms = chrono_elapsed_seconds.count();\n    cout &lt;&lt; \"Elapsed time: \" &lt;&lt; chrono_elapsed_ms &lt;&lt; \"ms\" &lt;&lt; endl;\n}\n</code></pre> End Measuring<pre><code>void end_measuring() {\n    auto chrono_end_time = chrono::high_resolution_clock::now();\n    chrono::duration&lt;double&gt; chrono_elapsed_seconds = chrono_end_time - chrono_start_time;\n    double chrono_elapsed_ms = chrono_elapsed_seconds.count();\n    cout &lt;&lt; \"Elapsed time: \" &lt;&lt; chrono_elapsed_ms &lt;&lt; \"s\" &lt;&lt; endl;\n}\n</code></pre> End Measuring<pre><code>void end_measuring() {\n    auto chrono_end_time = chrono::high_resolution_clock::now();\n    chrono::duration&lt; double, ratio&lt;60&gt; &gt; chrono_elapsed_seconds = chrono_end_time - chrono_start_time;\n    double chrono_elapsed_ms = chrono_elapsed_seconds.count();\n    cout &lt;&lt; \"Elapsed time: \" &lt;&lt; chrono_elapsed_ms &lt;&lt; \"min\" &lt;&lt; endl;\n}\n</code></pre>"},{"location":"oi-tips/file-read-and-write/","title":"File Read & Write","text":""},{"location":"oi-tips/file-read-and-write/#c-file-freopen","title":"C: FILE <code>freopen()</code>","text":"<p>head file: `</p> Definition<pre><code>std::FILE* freopen( const char* filename, const char* mode, std::FILE* stream );\n</code></pre>"},{"location":"oi-tips/file-read-and-write/#file-access-mode-string","title":"File Access Mode String","text":"<p>From CPPReference</p> File access mode string Meaning Explanation Action if file  already exists Action if file  does not exist \"r\" read Open a file for reading read from start return NULL and set error \"w\" write Create a file for writing destroy contents create new \"a\" append Append to a file write to end create new \"r+\" read extended Open a file for read/write read from start return NULL and set error \"w+\" write extended Create a file for read/write destroy contents create new \"a+\" append extended Open a file for read/write write to end create new <p>Note</p> <p>std::freopen is the only way to change the narrow/wide orientation of a stream once it has been established by an I/O operation or by std::fwide.</p> Example <pre><code>#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    freopen(\"in.in\", \"r\", stdin);\n    freopen(\"out.out\", \"w\", stdout);\n\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    cout &lt;&lt; a * a + b * b &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <p>Warning</p> <p>If you have used the untie operation, you shouldn't use freopen because you would have already disabled <code>&lt;cstdio&gt;</code>.</p> Tip <p>If you are using an Online Judge, you can add this macro definition to your code:</p> ONLINE_JUDGE<pre><code>#ifdef ONLINE_JUDGE\n#else\n#endif\n</code></pre> <p>Most OJ will use this macro definition, while your computer won't have one, thus you can add freopen in ONLINE_JUDGE so that you can use freopen as it'll be disabled on your OJ.</p> Example <pre><code>int main() {\n    #ifdef ONLINE_JUDGE\n    #else   // when run on local\n        freopen(\"in.in\", \"r\", \"stdin\");\n        freopen(\"out.out\", \"w\", \"stdout\");\n    #endif\n}\n</code></pre>"},{"location":"oi-tips/file-read-and-write/#c-fstream-fiostream","title":"C++: fstream <code>fiostream</code>","text":""},{"location":"oi-tips/file-read-and-write/#headfile-fiostream","title":"headfile: <code>&lt;fiostream&gt;</code>","text":"ReadWriteRead &amp; Write <pre><code>ifstream in(\"FILENAME\", ios::in);\n</code></pre> <pre><code>ofstream out(\"FILENAME\", ios::out);\n</code></pre> <pre><code>fstream foi(\"FILENAME\", ios::in|ios::out);\n</code></pre>"},{"location":"oi-tips/file-read-and-write/#function-open","title":"function <code>open()</code>","text":"General UsingProtocol <pre><code>void open(const char * filename,\n    ios_base::openmode mode = ios_base::in | ios::base::out);\n</code></pre> <pre><code>void open(const wchar_t *_Filename,\n    ios_base::in | ios_base::out, int prot = ios_base::_Openprot);\n</code></pre> Parameters modeprot <pre><code>    ios::app: //open the file as append  \n\n    ios::ate: //Locate the file to the end of the file when it is opened. ios:app includes this property.  \n\n    ios::binary: //Open the file as binary, the default is text. See the previous section for the difference between the two methods  \n\n    ios::in: // the file is opened as input (file data is entered into memory)  \n\n    ios::out: //files are opened as output (memory data is output to the file)  \n\n    ios::nocreate: //doesn't create the file, so it fails to open if the file doesn't exist  \n\n    ios::noreplace: // doesn't overwrite the file, so opening the file fails if the file exists  \n\n    ios::trunc: // set file length to 0 if file exists\n</code></pre> <pre><code>    0: Ordinary file, open access  \n    1: Read-only file  \n    2: Implicit files  \n    4: system file \n</code></pre> <p>Tip</p> <p>You can use \"or\" or \"+\" to connect the above attributes, such as 3 or 1 | 2 is to open the file with read-only and implicit attributes.</p>"},{"location":"oi-tips/file-read-and-write/#status-indicator","title":"Status Indicator","text":"<pre><code>is_open() //whether the file is normally open\nbad() // read and write process whether the error\nfail() // read and write process whether the error \neof() // read the file to reach the end of the file, return true\ngood () // any of the above return true, this will return false\n</code></pre>"},{"location":"oi-tips/gcc-optimize/","title":"GCC Optimize","text":""},{"location":"oi-tips/gcc-optimize/#difference-between-gcc-optimizations","title":"Difference Between GCC Optimizations","text":"<ul> <li>O1: Enable basic optimizations, including function inlining and loop unrolling.</li> <li>O2: Enable more optimizations, including function inlining, loop unrolling, constant propagation, dead code removal, etc.</li> <li>O3: Enable more advanced optimizations, including function inlining, loop unrolling, constant propagation, dead code removal, vectorization, etc.</li> <li>Os: Enable optimizations with code size reduction as the main goal.</li> </ul> <p>Warning</p> <p>Enabling higher-level optimization options may result in increased compilation times and, in some cases, may result in less efficient code execution.</p> <p>Warning</p> <p>Enabling GCC optimization manually is not allowed in Luogu OJ</p>"},{"location":"oi-tips/gcc-optimize/#usage","title":"Usage","text":"<p>Tip</p> <p>If you have STL in your code, you'd better turn on O2 or even O3 optimization.</p> O2 Optimization<pre><code>#pragma GCC optimize(2)\n</code></pre>"},{"location":"oi-tips/qread-and-qwrite/","title":"Quick Read & Write","text":"Quick Read<pre><code>char *P1,*P2,BUF[100000];\n#define NC() (P1==P2 &amp;&amp; (P2 = (P1=BUF) + fread(BUF, 1, 100000, stdin), P1==P2) ? EOF : *P1++)\nint read() {\n    int x = 0, f = 1;\n    char CH = NC();\n    while(CH &lt; 48 || CH &gt; 57)\n    {\n        if(CH == '-')\n            f = -1;\n        CH = NC();\n    }\n    while(CH&gt;=48&amp;&amp;CH&lt;=57)\n        x = x*10 + CH-48, CH=NC();\n    return x*f;\n}\n</code></pre> Quick Write<pre><code>void write(int x) {\n    if(x &lt; 0)\n        putchar('-'), x = -x;\n    if(x &gt; 9)\n        qwrite(x/10);\n    putchar(x%10 + '0');\n    return;\n}\n</code></pre>"},{"location":"school-notes/junior-notes/geography/","title":"\u521d\u4e2d\u5730\u7406\u603b\u7ed3","text":""},{"location":"school-notes/junior-notes/geography/#i","title":"\u2160. \u5730\u56fe\u4fe1\u606f\u7684\u83b7\u53d6\u3001\u8868\u8fbe\u548c\u7406\u89e3","text":""},{"location":"school-notes/junior-notes/geography/#_1","title":"\u4ece\u5730\u56fe\u548c\u56fe\u8868\u4e2d\u83b7\u53d6\u4fe1\u606f","text":"<pre><code>\u300a\u4eba\u6587\u5730\u7406 \u4e0a\u518c\u300b P2~4, P14~20, P45~52\n</code></pre>"},{"location":"school-notes/junior-notes/geography/#_2","title":"\u5730\u56fe\u4e09\u8981\u7d20","text":"<p>\u65b9\u5411\uff0c\u6bd4\u4f8b\u5c3a\uff0c\u56fe\u4f8b &amp; \u6ce8\u8bb0 <sup>1</sup></p>"},{"location":"school-notes/junior-notes/geography/#_3","title":"\u65b9\u5411\ud83e\udded","text":"\u6b63\u786e\u8868\u8fbe\u67d0\u5730\u7684\u7ecf\u7eac\u5ea6 <p>Point A (n\u00b0 N/S, n\u00b0 W/E)</p> <p>\u5982\uff1aA\u70b9\uff0830\u00b0 N, 45\u00b0 W\uff09</p> <p>Warning</p> <p>\u7ad9\u5728\u5730\u7403\u7684\u5357(\u5317)\u6781\u70b9\uff0c\u524d\u540e\u5de6\u53f3\u90fd\u662f\u5317(\u5357)\u65b9</p>"},{"location":"school-notes/junior-notes/geography/#_4","title":"\u56fe\u4f8b &amp; \u6ce8\u8bb0\ud83c\udff7\ufe0f","text":"<p>\u56fe\u4f8b\u548c\u6ce8\u8bb0\u7684\u533a\u522b</p> <p>\u56fe\u4f8b\uff1a\u5bf9\u5730\u56fe\u4e0a\u5404\u79cd\u7b26\u53f7\u548c\u6ce8\u8bb0\u7684\u8bf4\u660e\uff0c\u4e00\u822c\u5728\u5730\u56fe\u5916\u9762</p> <p>\u6ce8\u8bb0\uff1a\u6307\u5730\u56fe\u4e0a\u7684\u6587\u5b57\u8bf4\u660e\uff0c\u4e00\u822c\u5730\u56fe\u91cc\u9762</p>"},{"location":"school-notes/junior-notes/geography/#_5","title":"\u4ece\u5730\u56fe\ud83d\uddfa\ufe0f\u4e0a\u83b7\u53d6\u4fe1\u606f","text":""},{"location":"school-notes/junior-notes/geography/#_6","title":"\u7b49\u9ad8\u7ebf\u5730\u5f62\u56fe","text":"Tip <p>\u5982\u4e0a\u56fe\uff0c\u56fe\u5e45\u548c\u56fe\u4e2d\u7b49\u9ad8\u8ddd\u76f8\u540c\u65f6\uff0c\u6bd4\u4f8b\u5c3a\u8d8a\u5c0f\uff0c\u5761\u5ea6\u8d8a\u7f13\uff0c\u53cd\u4e4b\u540c\u7406</p> <p>$\\therefore$ \u5761\u5ea6\u6700\u7f13\u7684\u662fC</p> \u5c71\u810a\u548c\u5c71\u8c37\u7684\u5224\u5b9a <p>\u5c71\u810a\uff1a\u7b49\u9ad8\u7ebf\u5411\u4f4e\u5904\u51f8\u51fa \u5c71\u8c37\uff1a\u7b49\u9ad8\u7ebf\u5411\u9ad8\u51fa\u51f8\u51fa (\u53ef\u4ee5\u53d1\u80b2\u6cb3\u6d41)</p>"},{"location":"school-notes/junior-notes/geography/#_7","title":"\u4ece\u5730\u7403\u4eea\ud83c\udf0e\u4e0a\u770b\u4e16\u754c","text":""},{"location":"school-notes/junior-notes/geography/#_8","title":"\u7ecf\u7ebf\u548c\u7eac\u7ebf","text":"<p>\u7ecf\u7ebf\u53c8\u540d\u5b50\u5348\u7ebf\ud83c\udf10</p> \u7ecf\u7ebf\u7eac\u7ebf\u7684\u957f\u5ea6\u548c\u5f62\u72b6 <p>\u6bcf\u6761\u7ecf\u7ebf\u5448\u534a\u5706\u72b6\uff0c\u6bcf\u6761\u957f\u5ea6\u76f8\u7b49</p> <p>\u6bcf\u6761\u7eac\u7ebf\u5448\u6574\u5706\u72b6<sup>2</sup>\uff0c\u8d64\u9053\u6700\u957f</p>"},{"location":"school-notes/junior-notes/geography/#_9","title":"\u7ecf\u5ea6\u548c\u7eac\u5ea6","text":"\u9879\u76ee \u7ecf\u5ea6 \u7eac\u5ea6 \u5ea6\u6570\u8d77\u59cb\u7ebf \u672c\u521d\u5b50\u5348\u7ebf \u8d64\u9053 \u5212\u5206\u65b9\u6cd5 \u4ee5\u672c\u521d\u5b50\u5348\u7ebf\u4e3a\u754c\uff0c\u5411\u4e1c\u4e1c\u7ecf\uff0c\u5411\u897f\u897f\u7ecf\uff0c\u5404180\u00b0 \u4ee5\u8d64\u9053\u4e3a\u754c\uff0c\u5411\u5317\u5317\u7eac\uff0c\u5411\u5357\u5357\u7eac\uff0c\u540490\u00b0 \u534a\u7403\u5212\u5206 \u4e1c\u534a\u7403\ud83c\udf0f\uff1a20\u00b0 W - 160\u00b0 E \u8d64\u9053\u4e3a\u754c <p>Danger</p> <p>\u4e1c\u897f\u534a\u7403\u5206\u754c\u7ebf\u4e3a20\u00b0 W, 160\u00b0 E</p> \u4e94\u6e29\u5e26 &amp; \u4f4e\u4e2d\u9ad8\u7eac\u5ea6 <p></p> <p>\u636e\u56fe\u53ef\u77e5\uff0c\u6211\u56fd\u5927\u90e8\u5206\u5730\u533a\u4f4d\u4e8e\u5317\u6e29\u5e26\uff0c\u4e2d\u7eac\u5ea6\uff1b\u5c0f\u90e8\u5206\u5730\u533a\u4f4d\u4e8e\u70ed\u5e26\uff0c\u4f4e\u7eac\u5ea6</p> <p>\u7ecf\u5ea6\u76f8\u5dee15\u00b0\uff0c\u65f6\u95f4\u76f8\u5dee1h</p>"},{"location":"school-notes/junior-notes/geography/#_10","title":"\u63cf\u8ff0\u533a\u57df\u7684\u4f4d\u7f6e\u3001\u81ea\u7136\u73af\u5883\u548c\u4eba\u6587\u73af\u5883\u7684\u7279\u70b9","text":"<pre><code>\u300a\u4eba\u6587\u5730\u7406 \u4e0a\u518c\u300bP100~104\n</code></pre>"},{"location":"school-notes/junior-notes/geography/#_11","title":"\u63cf\u8ff0\u5730\u533a\u7684\u81ea\u7136\u73af\u5883\ud83c\udf32\u7279\u70b9","text":"<p>\u5730\u5f62\u3001\u6c14\u5019\u3001\u6cb3\u6d41\u3001\u81ea\u7136\u8d44\u6e90\u7b49</p>"},{"location":"school-notes/junior-notes/geography/#_12","title":"\u63cf\u8ff0\u65b9\u6cd5","text":"\u5730\u5f62 <ul> <li>\u6d77\u62d4</li> <li>\u5730\u9762\u8d77\u4f0f</li> <li>\u5730\u5f62\u79cd\u7c7b\u548c\u5206\u5e03</li> </ul> \u6c14\u5019 <ul> <li>\u6c14\u6e29</li> <li>\u964d\u6c34</li> </ul> \u5f52\u7eb3\u6c14\u5019\u7279\u5f81 <p>\u5b63\u8282+\u6c14\u6e29\u7279\u70b9+\u964d\u6c34\u7279\u70b9</p> \u6cb3\u6d41 <ul> <li>\u5e74\u5f84\u6d41\u91cf <p>\u5e74\u964d\u6c34\u91cf</p> </li> <li>\u5f84\u6d41\u91cf\u5b63\u8282\u53d8\u5316 <p>\u964d\u6c34\u91cf\u5b63\u8282\u53d8\u5316</p> </li> </ul> \u4e9a\u70ed\u5e26\u5b63\u98ce\u6c14\u5019 <p>$\\because$ \u590f\u5b63\u591a\u96e8\uff0c\u51ac\u5b63\u5c11\u96e8</p> <p>$\\therefore$ \u6cb3\u6d41\u5f84\u6d41\u91cf\u590f\u5b63\u5927\uff0c\u51ac\u5b63\u5c11</p> <ul> <li>\u6d41\u901f <p>\u7b49\u9ad8\u7ebf</p> </li> <li>\u6d41\u5411 <p>\u5730\u52bf</p> </li> <li>\u6c34\u80fd <p>\u5730\u52bf\u843d\u5dee\uff0c\u5f84\u6d41\u91cf</p> </li> <li>\u6c34\u4f4d <p>\u6cb3\u6d41\u5bbd\u5ea6\uff0c\u5f84\u6d41\u91cf</p> </li> <li>\u542b\u6c99\u91cf <p>\u571f\u8d28\uff0c\u4eba\u4e3a\u56e0\u7d20</p> </li> <li>\u7ed3\u51b0\u671f <p>\u6c14\u6e29</p> </li> <li>\u6c34\u7cfb\u7279\u5f81\u63cf\u8ff0 <p>\u6cb3\u7f51(\u5bc6\u96c6/\u7a00\u758f)\u3001\u6cb3\u6e56\u6570\u91cf\u3001\u957f\u5ea6\u3001\u5165\u6d77\u53e3\u3001\u6d41\u57df\u9762\u79ef\u7b49</p> </li> </ul> \u8d44\u6e90 <p>\u5e38\u89c1\u8d44\u6e90\uff1a\u571f\u5730\u8d44\u6e90\u3001\u77ff\u4ea7\u8d44\u6e90\u3001\u751f\u7269\u8d44\u6e90\u3001\u6c34\u8d44\u6e90\u3001\u592a\u9633\u80fd\u3001\u98ce\u80fd\u7b49</p> <p>\u5e38\u89c1\u8868\u8ff0\uff1a\"\u571f\u5730\u8d44\u6e90\u5e7f\u9614\uff0c\u571f\u5730\u80a5\u6c83\" \"\u7164\u70ad\u8d44\u6e90\u4e30\u5bcc\" \"\u6c34\u8d44\u6e90\u77ed\u7f3a\"\u7b49</p> \u8015\u5730 <p>\u5206\u4e3a\u4ee5\u4e0b2\u7c7b\uff1a</p> <ol> <li> <p>\u6c34\u7530\uff1a\u6c34\u8d44\u6e90\u4e30\u5bcc\u3001\u5730\u52bf\u4f4e\u5e73\u7684\u5730\u65b9\uff0c\u4e00\u822c\u4ee5\u6c34\u7530\u4e3a\u4e3b</p> </li> <li> <p>\u65f1\u5730\uff1a\u6c34\u8d44\u6e90\u4e0d\u8db3\uff0c\u5730\u52bf\u53c8\u76f8\u5bf9\u8f83\u9ad8\u7684\u5730\u65b9\uff0c\u4e00\u822c\u4ee5\u65f1\u5730\u4e3a\u4e3b</p> </li> </ol>"},{"location":"school-notes/junior-notes/geography/#_13","title":"\u63cf\u8ff0\u5730\u533a\u7684\u4eba\u6587\u73af\u5883\ud83d\uddff\u7279\u70b9","text":"<p>\u4eba\u53e3\u3001\u6c11\u65cf\u3001\u57ce\u5e02\u548c\u4e61\u6751\u3001\u98ce\u4fd7\u4e60\u60ef\u7b49</p>"},{"location":"school-notes/junior-notes/geography/#_14","title":"\u63cf\u8ff0\u65b9\u6cd5","text":"<ul> <li>\u751f\u6d3b\u7279\u8272 <p>\u8863\u98df\u4f4f\u884c\uff0c\u4f20\u7edf\u6587\u5316\uff0c\u98ce\u4fd7\u4e60\u60ef</p> </li> <li>\u519c\u4e1a\u751f\u4ea7 <p>\u519c\u4e1a\u751f\u4ea7\u7c7b\u578b\uff1a\u79cd\u690d\u4e1a\u3001\u6797\u4e1a\u3001\u755c\u7267\u4e1a\u3001\u6e14\u4e1a\u7b49 \u79cd\u690d\u4e1a\uff1a\u4e3b\u8981\u79cd\u690d\u7684\u519c\u4f5c\u7269\u79cd\u7c7b\u3001\u8015\u4f5c\u5236\u5ea6\u3001\u751f\u4ea7\u6761\u4ef6</p> </li> <li>\u5176\u4ed6\u751f\u4ea7\u7279\u8272 <p>\u5236\u9020\u4e1a\u3001\u9ad8\u79d1\u6280\u4ea7\u4e1a\u3001\u91d1\u878d\u4e1a\u3001\u670d\u52a1\u4e1a\u7b49</p> </li> </ul>"},{"location":"school-notes/junior-notes/geography/#_15","title":"\u611f\u53d7\u533a\u57df\u7684\u53d1\u5c55","text":"<p>\u4e00\u4e2a\u533a\u57df\u7684\u53d1\u5c55\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u8be5\u5730\u7684\u653f\u6cbb\u3001\u7ecf\u6d4e\u548c\u6587\u5316\u53d1\u5c55\u6c34\u5e73\u7b49\u51e0\u4e2a\u65b9\u9762\u6765\u8ba4\u8bc6</p> \u5357\u975e\ud83c\uddff\ud83c\udde6 <p>\u5357\u975e\u4f9d\u9760\u81ea\u7136\u6761\u4ef6\u7684\u4f18\u52bf\uff0c\u56e0\u5730\u5236\u5b9c\u5730\u53d1\u5c55\u7ecf\u6d4e\u3002</p> <p>\u4f8b\u5982\uff0c\u5145\u5206\u5229\u7528\u5176\u77ff\u4ea7\u8d44\u6e90\u4f18\u52bf\uff0c\u5927\u529b\u53d1\u5c55\u91c7\u77ff\u4e1a\u548c\u5236\u9020\u4e1a\uff1b</p> <p>\u5229\u7528\u4e30\u5bcc\u7684\u91ce\u751f\u52a8\u7269\u8d44\u6e90\uff0c\u53d1\u5c55\u65c5\u6e38\u4e1a\uff0c\u7b49\u7b49\u3002</p>"},{"location":"school-notes/junior-notes/geography/#_16","title":"\u3010\u91cd\u70b9\u63d0\u9192\u3011","text":"\u5f71\u54cd\u519c\u4e1a\u751f\u4ea7\u7684\u56e0\u7d20 \u5149 <ul> <li>\u7eac\u5ea6\uff1a\u7eac\u5ea6\u4f4e\uff0c\u592a\u9633\u8f90\u5c04\u91cf\u4e30\u5bcc</li> <li>\u5929\u6c14\uff1a\u6674\u5929\u591a\uff0c\u5149\u7167\u65f6\u95f4\u957f</li> <li>\u6d77\u62d4\uff1a\u6d77\u62d4\u9ad8\uff0c\u7a7a\u6c14\u7a00\u8584\uff0c\u900f\u660e\u5ea6\u597d\uff0c\u592a\u9633\u8f90\u5c04\u91cf\u4e30\u5bcc</li> </ul> \u70ed <ul> <li>\u5b63\u8282\uff1a\u590f\u5b63\u6e29\u5ea6\u9ad8\uff0c\u70ed\u91cf\u6761\u4ef6\u597d</li> <li>\u7eac\u5ea6\uff1a\u4f4e\u7eac\u5ea6\u5730\u533a\u70ed\u91cf\u6761\u4ef6\u597d</li> <li>\u5730\u5f62\uff1a\u6d77\u62d4\u9ad8\uff0c\u6c14\u6e29\u4f4e\uff0c\u70ed\u91cf\u4e0d\u8db3\uff1b\u76c6\u5730\u5730\u5f62\u4e0d\u6613\u6563\u70ed\uff0c\u70ed\u91cf\u6761\u4ef6\u8f83\u597d\uff0c\u4e1c\u897f\u8d70\u5411\u548c\u4e1c\u5317\u4e00\u897f\u5357\u8d70\u5411\u7684\u5c71\u8109\uff0c\u5927\u5927\u51cf\u5f31\u4e86\u51ac\u5b63\u5bd2\u6f6e\u548c\u51b7\u7a7a\u6c14\u7684\u5165\u4fb5\u7a0b\u5ea6\u7b49</li> </ul> \u6c34 <ul> <li>\u65f6\u95f4\uff1a\u5b63\u8282\u53d8\u5316\u89d2\u5ea6</li> <li>\u7a7a\u95f4\uff1a\u5982\u201c\u4e1c\u591a\u897f\u5c11\u201d\u201c\u5357\u591a\u5317\u5c11\u201d\u201c\u7531\u4e1c\u5357\u6cbf\u6d77\u5411\u897f\u5317\u5185\u9646\u9010\u6e10\u51cf\u5c11\u201d\u7b49</li> <li>\u5f71\u54cd\u964d\u96e8\u56e0\u7d20\uff1a<ol> <li>\u590f\u5b63\u98ce\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53d7\u590f\u5b63\u98ce\u5f71\u54cd\u660e\u663e\u7684\u5730\u65b9\uff0c\u964d\u6c34\u8f83\u591a\uff09</li> <li>\u6d77\u9646\u4f4d\u7f6e\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6cbf\u6d77\u5730\u533a\u964d\u6c34\u591a\uff0c\u5185\u9646\u5730\u533a\u964d\u6c34\u5c11\uff09\u3002</li> <li>\u5730\u5f62\uff08\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6e7f\u6da6\u6c14\u6d41\u9047\u5230\u9ad8\u5c71\u963b\u6321\u65f6\uff0c\u8fce\u98ce\u5761\u964d\u6c34\u591a\uff0c\u80cc\u98ce\u5761\u964d\u6c34\u5c11\uff09</li> </ol> </li> </ul> \u571f <ol> <li>\u5730\u5f62\uff1a\u5982\u5e73\u539f\uff0c\u5e73\u5766\u8fbd\u9614\uff0c\u9002\u5b9c\u79cd\u690d\u519c\u4f5c\u7269\uff1b\u4e18\u9675\u9002\u5408\u79cd\u690d\u8336\u53f6\u3001\u67d1\u6a58\u7b49\u7ecf\u6d4e\u4f5c\u7269</li> <li>\u571f\u58e4\uff1a\u5982\u6cb3\u6d41\u51b2\u79ef\u5e73\u539f\uff0c\u571f\u58e4\u80a5\u6c83\uff0c\u9002\u5408\u519c\u4f5c\u7269\u7684\u751f\u957f\uff1b\u4e1c\u5357\u4e18\u9675\u5730\u533a\u7684\u9178\u6027\u571f\u58e4\u9002\u5b9c\u79cd\u690d\u8336\u6811\u7b49\u4f5c\u7269\uff1b\u78b1\u6027\u571f\u58e4\u5219\u9002\u5408\u79cd\u690d\u559c\u78b1\u6027\u7684\u4f5c\u7269</li> </ol> \u5f71\u54cd\u5de5\u4e1a\u751f\u4ea7\u7684\u56e0\u7d20 <p>\u5730\u7406\u4f4d\u7f6e\u3001\u8d44\u6e90\u3001\u4ea4\u901a\u3001\u5e02\u573a\u3001\u79d1\u6280\u3001\u4eba\u624d\u3001\u52b3\u52a8\u529b\u3001\u8d44\u91d1\u3001\u9996\u7840\u8bbe\u65bd\u3001\u5386\u53f2\u6761\u4ef6\u3001\u653f\u7b56\u652f\u6301\u7b49</p> \u73e0\u4e09\u89d2\u5730\u533a <p>\u8fd8\u8981\u8003\u8651\u662f\u5426\u9760\u8fd1\u6e2f\u6fb3\uff0c\u662f\u5426\u5730\u5904\u4fa8\u4e61\u3002\u8fd9\u91cc\u6709\u4ee5\u5f15\u5916\u6765\u8d44\u91d1\u5c24\u5176\u662f\u6ee4\u6fb3\u8d44\u5168\u7684\u6709\u5229\u6761\u4ef6\uff0c\u8fd8\u6709\u53d1\u8fbe\u7684\u5e02\u573a\u7ecf\u6599\u5e7f\u9614\u7684\u5e02\u573a\u7b49\u3002</p>"},{"location":"school-notes/junior-notes/geography/#ii","title":"\u2161. \u5171\u540c\u7684\u5bb6\u56ed \u5171\u540c\u7684\u5c81\u6708","text":""},{"location":"school-notes/junior-notes/geography/#_17","title":"\u5927\u6d32\u26f0\ufe0f\u548c\u5927\u6d0b\ud83c\udf0a","text":"<pre><code>\u300a\u4eba\u6587\u5730\u7406 \u4e0a\u518c\u300b P22~27\n</code></pre>"},{"location":"school-notes/junior-notes/geography/#_18","title":"\u6d77\u9646\u5206\u5e03","text":"<p>\u6d77\u6d0b\u536071%\uff0c\u9646\u5730\u536029%</p>"},{"location":"school-notes/junior-notes/geography/#_19","title":"\u5927\u6d32\u26f0\ufe0f","text":""},{"location":"school-notes/junior-notes/geography/#_20","title":"\u542b\u4e49","text":"<p>\u5927\u9646\u4e0e\u5176\u9644\u8fd1\u7684\u5c9b\u5c7f\u5408\u8d77\u6765\u79f0\u4f5c\u5927\u6d32</p>"},{"location":"school-notes/junior-notes/geography/#_21","title":"\u6392\u5217\ud83d\udce2","text":"<p>\u4e9a\u6d32\ud83c\udf0f &gt; \u975e\u6d32\ud83c\udf0d &gt; \u5317\u7f8e\u6d32\ud83c\udf0e &gt; \u5357\u7f8e\u6d32\ud83c\udf0e &gt; \u5357\u6781\u6d32\ud83c\udde6\ud83c\uddf6 &gt; \u6b27\u6d32\ud83c\udf0d &gt; \u5927\u6d0b\u6d32\ud83c\udf0f</p>"},{"location":"school-notes/junior-notes/geography/#_22","title":"\u5206\u754c\u7ebf\u3030\ufe0f","text":"\u5206\u754c\u7ebf \u4e9a\u6d32\u4e0e\u5317\u7f8e\u6d32\u767d\u4ee4\u6d77\u5ce1\u6240\u5728\u5927\u6d32\u6b27\u6d32\u4e0e\u975e\u6d32\u5730\u4e2d\u6d77\u2014\u76f4\u5e03\u7f57\u9640\u6d77\u5ce1\u4e9a\u6b27\u4ea4\u754c\u975e\u6d32\u4e0e\u4e9a\u6d32\u82cf\u4f0a\u58eb\u8fd0\u6cb3\u5317\u7f8e\u6d32\u4e9a\u6d32\u4e0e\u6b27\u6d32\u4e4c\u62c9\u5c14\u5c71\u8109\u4e00\u4e4c\u62c9\u5c14\u6cb3\u4e00\u91cc\u6d77\u4e00\u5927\u9ad8\u52a0\u7d22\u5c71\u8109\u4e00\u9ed1\u6d77\u2014\u571f\u8033\u5176\u6d77\u5ce1\u4e9a\u6d32\u5317\u7f8e\u6d32\u4e0e\u5357\u7f8e\u6d32\u5df4\u62ff\u9a6c\u8fd0\u6cb3\u4e9a\u6d32\u5357\u7f8e\u6d32\u4e0e\u5357\u6781\u6d32\u5fb7\u96f7\u514b\u6d77\u5ce1\u4e9a\u6d32\u9131\u9633\u6e56\u4e2d\u56fd\u9762\u79ef\u6700\u5927\u7684\u6de1\u6c34\u6e56\u4e9a\u6d32"},{"location":"school-notes/junior-notes/geography/#_23","title":"\u5206\u533a\u00a7","text":"<p>\u4e9a\u6d32\ud83c\udf0f\uff1a\u4e1c\u4e9a\u3001\u4e1c\u5357\u4e9a\u3001\u5357\u4e9a\u3001\u4e2d\u4e9a\u3001\u897f\u4e9a\u3001\u5317\u4e9a</p> <p>\u6b27\u6d32\ud83c\udf0d\uff1a\u5357\u6b27\u3001\u897f\u6b27\u3001\u4e2d\u6b27\u3001\u5317\u6b27\u3001\u4e1c\u6b27</p>"},{"location":"school-notes/junior-notes/geography/#_24","title":"\u5927\u6d0b\ud83c\udf0a","text":""},{"location":"school-notes/junior-notes/geography/#_25","title":"\u6392\u5217\ud83d\udce2","text":"<p>\u592a\u5e73\u6d0b &gt; \u5927\u897f\u6d0b &gt; \u5370\u5ea6\u6d0b &gt; \u5317\u51b0\u6d0b</p>"},{"location":"school-notes/junior-notes/geography/#_26","title":"\u8457\u540d\u8fd0\u6cb3 &amp; \u6d77\u5ce1","text":"\u8457\u540d\u8fd0\u6cb3 &amp; \u6d77\u5ce1 \u8fd0\u6cb3\u540d\u79f0 \u5730\u7406\u4f4d\u7f6e \u6c9f\u901a\u6d77\u6d0b \u82cf\u4f0a\u58eb\u8fd0\u6cb3 \u4e9a\u6d32\u548c\u975e\u6d32\u7684\u5206\u754c\u5904 \u5730\u4e2d\u6d77--\u7ea2\u6d77 \u5df4\u62ff\u9a6c\u8fd0\u6cb3 \u5357\u3001\u5317\u7f8e\u6d32\u7684\u5206\u754c\u5904 \u592a\u5e73\u6d0b--\u5927\u897f\u6d0b \u6d77\u5ce1\u540d\u79f0 \u5730\u7406\u4f4d\u7f6e \u6c9f\u901a\u7684\u6d77\u6d0b \u9a6c\u516d\u7532\u6d77\u5ce1 \u4f4d\u4e8e\u4e1c\u5357\u4e9a \u592a\u5e73\u6d0b\u4e00\u5370\u5ea6\u6d0b \u5fb7\u96f7\u514b\u6d77\u5ce1 \u4f4d\u4e8e\u5357\u7f8e\u6d32\u3001\u5357\u6781\u6d32\u4e4b\u95f4 \u592a\u5e73\u6d0b\u4e00\u5927\u897f\u6d0b \u9ea6\u54f2\u4f26\u6d77\u5ce1 \u4f4d\u4e8e\u5357\u7f8e\u6d32\u5357\u7aef \u592a\u5e73\u6d0b\u4e00\u5927\u897f\u6d0b \u767d\u4ee4\u6d77\u5ce1 \u4f4d\u4e8e\u4e9a\u6d32\u3001\u5317\u7f8e\u6d32\u4e4b\u95f4 \u592a\u5e73\u6d0b\u4e00\u5317\u51b0\u6d0b \u76f4\u5e03\u7f57\u9640\u6d77\u5ce1 \u4f4d\u4e8e\u6b27\u6d32\u3001\u975e\u6d32\u4e4b\u95f4 \u5730\u4e2d\u6d77\u4e00\u5927\u897f\u6d0b \u970d\u5c14\u6728\u5179\u6d77\u5ce1 \u4f4d\u4e8e\u963f\u62c9\u4f2f\u534a\u5c9b \u4f0a\u6717\u4e4b\u95f4 \u6ce2\u65af\u6e7e\u4e00\u5370\u5ea6\u6d0b (\u963f\u62c9\u4f2f\u6d77) \u66fc\u5fb7\u6d77\u5ce1 \u4f4d\u4e8e\u4e9a\u6d32\u3001\u975e\u6d32\u4e4b\u95f4 \u7ea2\u6d77\u4e00\u5370\u5ea6\u6d0b (\u963f\u62c9\u4f2f\u6d77)"},{"location":"school-notes/junior-notes/geography/#_27","title":"\u6d77\u6d0b\ud83c\udf0a\u5bf9\u4eba\u7c7b\ud83e\uddcd\ud83c\udfff\u7684\u5f71\u54cd","text":"<ol> <li>\u6de1\u6c34\ud83d\udca7\u8d44\u6e90</li> <li>\u6e14\u76d0\ud83d\udc1f\ud83e\uddc2\u8d44\u6e90</li> <li>\u4e3a\u65c5\u6e38\u4e1a\u63d0\u4f9b\u8d44\u6e90</li> <li>\u7a7a\u95f4\u8d44\u6e90</li> </ol> <p>\u5f00\u8f9f\u6d77\u4e0a\u4ea4\u901a\u822a\u7ebf\uff0c\u4fee\u7b51\u8fd0\u6cb3\uff0c\u5efa\u8bbe\u6e2f\u53e3\uff0c\u4fc3\u8fdb\u4e16\u754c\u5404\u5730\u4e4b\u95f4\u7684\u7269\u8d44\u4ea4\u6d41</p>"},{"location":"school-notes/junior-notes/geography/#_28","title":"\u3010\u91cd\u70b9\u63d0\u9192\u3011","text":"\u9646\u5730\u7684\u6784\u6210 <p>\u9646\u5730\u5206\u4e3a\u5927\u9646\u548c\u5c9b\u5c7f</p> <ul> <li>\u5927\u9646\u26f0\ufe0f</li> </ul> <p>\u6700\u5927\u7684\u5927\u9646\uff1a\u4e9a\u6b27\u5927\u9646\ud83c\udf0f</p> <p>\u6700\u5c0f\u7684\u5927\u9646\uff1a\u6fb3\u5927\u5229\u4e9a\u5927\u9646\ud83c\udde6\ud83c\uddfa</p> <ul> <li>\u5c9b\u5c7f\ud83c\udfdd\ufe0f</li> </ul> <p>\u6700\u5927\u7684\u5c9b\u5c7f\uff1a\u683c\u9675\u5170\u5c9b\ud83c\uddec\ud83c\uddf1</p> <p>\u6700\u5927\u7684\u7fa4\u5c9b\uff1a\u9a6c\u6765\u7fa4\u5c9b\ud83c\uddf2\ud83c\uddfe</p> <ul> <li>\u534a\u5c9b</li> </ul> <p>\u6700\u5927\u7684\u534a\u5c9b\uff1a\u963f\u62c9\u4f2f\u534a\u5c9b\ud83c\uddf8\ud83c\udde6</p> \u8d64\u9053\u7a7f\u8fc7\u7684\u5927\u6d32 <p>\u975e\u6d32\u3001\u4e9a\u6d32\u3001\u5927\u6d0b\u6d32\u3001\u5357\u7f8e\u6d32</p> \u56de\u5f52\u7ebf\u7a7f\u8fc7\u7684\u5927\u6d32 <p>\u5317\u56de\u5f52\u7ebf</p> <p>\u975e\u6d32\u3001\u4e9a\u6d32\u3001\u5927\u6d0b\u6d32\u3001\u5317\u7f8e\u6d32</p> <p>\u5357\u56de\u5f52\u7ebf\uff1a</p> <p>\u975e\u6d32\u3001\u5927\u6d0b\u6d32\u3001\u5357\u7f8e\u6d32</p> \u6781\u5708\u7a7f\u8fc7\u7684\u5927\u6d32 <p>\u5317\u6781\u5708</p> <p>\u6b27\u6d32\u3001\u4e9a\u6d32\u3001\u5317\u7f8e\u6d32</p> <p>\u5357\u6781\u5708</p> <p>\u5357\u6781\u6d32</p> \u8de8\u7ecf\u5ea6\u6700\u5e7f\u3001\u7eac\u5ea6\u6700\u9ad8 <p>\u6d32\u26f0\ufe0f\uff1a\u5357\u6781\u6d32</p> <p>\u6d0b\ud83c\udf0a\uff1a\u5317\u51b0\u6d0b</p> \u5927\u6d32\u5e73\u5747\u6d77\u62d4\u4e4b\u6700 <p>\u6700\u9ad8\uff1a\u5357\u6781\u6d32</p> <p>\u6700\u4f4e\uff1a\u6b27\u6d32</p>"},{"location":"school-notes/junior-notes/geography/#_29","title":"\u4e16\u754c\u81ea\u7136\u73af\u5883","text":"<pre><code>\u300a\u4eba\u6587\u5730\u7406 \u4e0a\u518c\u300b P21, P28~39\n</code></pre>"},{"location":"school-notes/junior-notes/geography/#_30","title":"\u5730\u5f62\u591a\u6837","text":"\u4e94\u79cd\u57fa\u672c\u5730\u5f62 \u7c7b\u578b \u6d77\u62d4 \u5730\u8868\u7279\u5f81 \u5c71\u5730 500\u7c73\u4ee5\u4e0a \u5cf0\u5ce6\u8d77\u4f0f,\u5761\u5ea6\u9661\u5cfb\u3002\u6709\u7684\u5448\u957f\u6761\u72b6\u5ef6\u4f38,\u5f62\u6210\u5c71\u8109\u3002 \u5c71\u8109\u6392\u5217\u6709\u5e8f,\u8109\u7edc\u5206\u660e,\u4eff\u4f5b\u662f\"\u5927\u5730\u7684\u9aa8\u67b6\" \u9ad8\u539f 500\u7c73\u4ee5\u4e0a \u5730\u8868\u8d77\u4f0f\u4e0d\u5927,\u4f46\u8fb9\u7f18\u5904\u6bd4\u8f83\u9661\u5ced;\u4e5f\u6709\u7684\u9ad8\u539f\u8868\u9762 \u5c71\u5ce6\u8d77\u4f0f,\u51f9\u51f8\u4e0d\u5e73 \u4e18\u9675 200~500\u7c73 \u8d77\u4f0f\u548c\u7f13 \u5e73\u539f 200\u7c73\u4ee5\u4e0b \u5730\u9762\u5e73\u5766\u6216\u8d77\u4f0f\u8f83\u5c0f,\u4e3b\u8981\u5206\u5e03\u5728\u5927\u6cb3\u4e24\u5cb8\u548c\u6fd2\u4e34\u6d77\u6d0b\u7684\u5730\u533a \u76c6\u5730 \u65e0\u6807\u51c6 \u56db\u5468\u88ab\u7fa4\u5c71\u73af\u7ed5,\u56db\u5468\u9ad8,\u4e2d\u95f4\u4f4e"},{"location":"school-notes/junior-notes/geography/#_31","title":"\u4e16\u754c\u4e0a\u91cd\u8981\u7684\u5730\u5f62\u5355\u5143","text":"\u91cd\u8981\u7684\u5730\u5f62\u5355\u5143 \u5730\u5f62\u7c7b\u578b\u91cd\u8981\u5730\u5f62\u5355\u5143\u7279\u70b9\u6240\u5728\u5927\u6d32\u5c71\u8109\u5b89\u7b2c\u65af\u5c71\u8109\u4e16\u754c\u4e0a\u6700\u957f\u7684\u5c71\u8109\u5357\u7f8e\u6d32\u559c\u9a6c\u62c9\u96c5\u5c71\u8109\u4e16\u754c\u4e0a\u6700\u9ad8\u7684\u5c71\u8109\u4e9a\u6d32\u9ad8\u539f\u9752\u85cf\u9ad8\u539f\u4e16\u754c\u4e0a\u6700\u9ad8\u7684\u9ad8\u539f\u4e9a\u6d32\u5df4\u897f\u9ad8\u539f\u4e16\u754c\u4e0a\u6700\u5927\u7684\u9ad8\u539f\u5357\u7f8e\u6d32\u5e73\u539f\u4e9a\u9a6c\u5b59\u5e73\u539f\u4e16\u754c\u4e0a\u6700\u5927\u7684\u70ed\u5e26\u96e8\u6797\u533a\u5357\u7f8e\u6d32\u76c6\u5730\u521a\u679c\u76c6\u5730\u975e\u6d32\u6700\u5927\u7684\u76c6\u5730\u975e\u6d32"},{"location":"school-notes/junior-notes/geography/#_32","title":"\u3010\u91cd\u70b9\u63d0\u9192\u3011","text":"\u5982\u4f55\u63cf\u8ff0\u4e00\u4e2a\u5730\u533a\u7684\u5730\u5f62\u7279\u70b9 <p>\u4e00\u822c\u53ef\u4ee5\u4ece\u6d77\u62d4\u3001\u5730\u9762\u8d77\u4f0f\u3001\u5730\u5f62\u7684\u79cd\u7c7b\u548c\u5206\u5e03\u4e09\u4e2a\u65b9\u9762\u6765\u63cf\u8ff0</p>"},{"location":"school-notes/junior-notes/geography/#_33","title":"\u6c14\u8c61\u4e07\u5343","text":"<pre><code>\u300a\u4eba\u6587\u5730\u7406 \u4e0a\u518c\u300b P21, P28~39\n</code></pre>"},{"location":"school-notes/junior-notes/geography/#_34","title":"\u6c14\u5019\u7684\u6982\u5ff5","text":"<p>\u6c14\u5019\u662f\u4e00\u4e2a\u5730\u533a\u591a\u5e74\u7684\u5929\u6c14\u5e73\u5747\u72b6\u51b5 \u4e00\u4e2a\u5730\u65b9\u7684\u6c14\u5019\u5177\u6709\u4e00\u5b9a\u7684\u7a33\u5b9a\u6027</p>"},{"location":"school-notes/junior-notes/geography/#_35","title":"\u6c14\u5019\u7684\u63cf\u8ff0","text":"\u901a\u8fc7\u6c14\u6e29\u66f2\u7ebf\u56fe\u548c\u964d\u6c34\u91cf\u67f1\u72b6\u56fe\uff0c\u4ece\u6c14\u6e29\u548c\u964d\u6c34\u4e24\u4e2a\u65b9\u9762\u63cf\u8ff0 <p>\u6c14\u6e29\u7684\u53d8\u5316\u7279\u70b9\u3001\u964d\u6c34\u7684\u65f6\u95f4\u5206\u5e03\u3001\u6c34\u70ed\u7684\u543b\u5408\u60c5\u51b5!</p>"},{"location":"school-notes/junior-notes/geography/#_36","title":"\u5224\u65ad\u6c14\u5019\u7c7b\u578b\u7684\u65b9\u6cd5","text":"\u4ee5\"\u6e29\"\u5b9a\"\u5e26\"\u4ee5\"\u6c34\"\u5b9a\"\u578b\"\u6700\u51b7\u6708\u6708\u5747\u6e29\u6e29\u5ea6\u5e26\u964d\u6c34\u5b63\u8282\u5206\u914d\u89c4\u5f8b\u6c14\u5019\u7c7b\u578b&gt;15C\u70ed\u5e26\u590f\u96e8\u578b(\u5168\u5e741500~2000\u6beb\u7c73)\u70ed\u5e26\u5b63\u98ce\u6c14\u5019\u5c11\u96e8\u578b\u70ed\u5e26\u6c99\u6f20\u6c14\u5019\u5e74\u96e8\u578b\u70ed\u5e26\u96e8\u6797\u6c14\u50190~15C\u4e9a\u70ed\u5e26\u590f\u96e8\u578b(\u5168\u5e74&gt;800\u6beb\u7c73)\u4e9a\u70ed\u5e26\u5b63\u98ce\u548c\u6e7f\u6da6\u6c14\u5019\u51ac\u96e8\u578b\u5730\u4e2d\u6d77\u6c14\u5019-15~0C\u6e29\u5e26\u590f\u96e8\u578b(\u5168\u5e74&lt;800\u6beb\u7c73)\u6e29\u5e26\u5b63\u98ce\u6c14\u5019&gt;0C\u5c11\u96e8\u578b\u6e29\u5e26\u5927\u9646\u6027\u6c14\u5019\u5e74\u96e8\u578b\u6e29\u5e26\u6d77\u6d0b\u6027\u6c14\u5019"},{"location":"school-notes/junior-notes/geography/#_37","title":"\u4e3b\u8981\u6c14\u5019\u7c7b\u578b","text":"\u4e3b\u8981\u6c14\u5019\u7c7b\u578b <ul> <li>\u70ed\u5e26\u5357\u6797\u6c14\u5019\uff1a\u7ec8\u5e74\u9ad8\u6e29\u591a\u96e8</li> <li>\u70ed\u5e26\u7ae0\u539f\u6c14\u5019\uff1a\u7ec8\u5e74\u9ad8\u6e29 \u5206\u5e72\u6e7f\u4e24\u5b63</li> <li>\u70ed\u5e26\u5b63\u98ce\u6c14\u5019\uff1a\u7ec8\u5e74\u9ad8\u6e29 \u5206\u65f1\u96e8\u4e24\u5b63</li> <li>\u70ed\u5e26\u6c99\u6de1\u6c14\u5019\uff1a\u7ec8\u5e74\u708e\u70ed\u5e72\u65f1</li> <li>\u4e9a\u70ed\u5e26\u5b63\u98ce\u548c\u6e7f\u6da6\u6c14\u5019\uff1a\u590f\u5b63\u9ad8\u6e29\u591a\u96e8 \u51ac\u5b63\u6e29\u548c\u5c11\u96e8</li> <li>\u5730\u4e2d\u6d77\u6c14\u5019\uff1a\u590f\u5b63\u708e\u70ed\u5e72\u71e5 \u51ac\u5b63\u6e29\u548c\u591a\u96e8</li> <li>\u6e29\u5e26\u6d77\u6d0b\u6027\u6c14\u5019\uff1a\u51ac\u6e29\u590f\u51c9 \u5168\u5e74\u964d\u6c34\u5747\u5300</li> <li>\u6e29\u5e26\u5b63\u98ce\u6c14\u5019\uff1a\u590f\u5b63\u9ad8\u6e29\u591a\u96e8 \u51ac\u5b63\u5bd2\u51b7\u5e72\u71e5</li> <li>\u6e29\u5e26\u5927\u9646\u6027\u6c14\u5019\uff1a\u51ac\u51b7\u590f\u70ed \u5168\u5e74\u964d\u6c34\u8f83\u5c11</li> <li>\u5bd2\u5e26\u6c14\u5019\uff1a\u7ec8\u5e74\u5bd2\u51b7\u5e72\u71e5</li> </ul> Tip <p>\u5bd2\u51b7\uff0c\u5f88\u591a\u5730\u65b9\u7ec8\u5e74\u51b0\u96ea\u8986\u76d6\uff0c\u6c14\u4faf\u91cd\u76f4\u53d8\u5316\u660e\u663e\u3002\u4e3b\u8981\u5206\u5e03\u5728\u9ad8\u5927\u7684\u9ad8\u539f\u3001\u5c71\u5730\u7b49\u5730\u533a\uff0c\u5982\u9752\u85cf\u9ad8\u539f\u3001\u963f\u5c14\u5351\u65af\u5c71\u3001\u5b89\u7b2c\u65af\u5c71\u8109\u7b49\u3002</p> <p></p>"},{"location":"school-notes/junior-notes/geography/#_38","title":"\u4e16\u754c\u4e3b\u8981\u6c14\u5019\u7c7b\u578b\u7684\u5206\u5e03\u60c5\u51b5","text":"\u6c14\u5019\u7c7b\u578b\u4e3b\u8981\u5206\u5e03\u5730\u533a(\u89c1\u5c01\u4e09\u5f69\u56fe)\u53ca\u7279\u70b9\u70ed \u5e26\u70ed\u5e26 \u96e8\u6797 \u6c14\u5019\u5206\u5e03\u89c4\u5f8b:\u5927\u81f4\u5728\u5357\u5317\u7eac10\u00b0\u4e4b\u95f4\u3002 \u5178\u578b\u5730\u533a:\u4e9a\u9a6c\u5b59\u6cb3\u6d41\u57df\u3001\u521a\u679c\u6cb3\u6d41\u57df\u3001\u9a6c\u6765\u7fa4\u5c9b\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u7ec8\u5e74\u9ad8\u6e29\u591a\u96e8\u3002\u690d\u88ab\u751f\u957f\u65fa\u76db,\u690d\u7269\u79cd\u7c7b\u7e41\u591a\u70ed\u5e26 \u8349\u539f \u6c14\u5019\u5206\u5e03\u89c4\u5f8b:\u5927\u81f4\u5728\u5357\u5317\u7eac10\u00b0\u81f3\u5357\u5317\u56de\u5f52\u7ebf\u4e4b\u95f4\u3002 \u5178\u578b\u5730\u533a:\u975e\u6d32\u4e2d\u90e8\u3001\u5357\u7f8e\u5df4\u897f\u3001\u6fb3\u5927\u5229\u4e9a\u5927\u9646\u5317\u90e8\u548c\u5357\u90e8\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u7ec8\u5e74\u9ad8\u6e29,\u4e00\u5e74\u6709\u660e\u663e\u7684\u5e72\u6e7f\u4e24\u5b63\u3002\u690d\u88ab\u662f\u7a00\u6811\u8349\u539f\u70ed\u5e26 \u5b63\u98ce \u6c14\u5019\u5206\u5e03\u89c4\u5f8b \u5927\u81f4\u5728\u5317\u7eac10\u00b0\u81f3\u5317\u56de\u5f52\u7ebf\u9644\u8fd1\u7684\u5357\u4e9a\u548c\u4e1c\u5357\u4e9a\u5927\u90e8\u5206\u5730\u533a\u3002 \u5178\u578b\u5730\u533a:\u4e9a\u6d32\u4e2d\u5357\u534a\u5c9b\u548c\u5370\u5ea6\u534a\u5c9b\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u7ec8\u5e74\u9ad8\u6e29,\u5206\u65f1\u96e8\u4e24\u5b63,\u590f\u5b63\u591a\u96e8\u3002\u690d\u88ab\u4e3a\u70ed\u5e26\u5b63\u96e8\u6797\u70ed\u5e26 \u6c99\u6f20 \u6c14\u5019\u5206\u5e03\u89c4\u5f8b:\u5927\u81f4\u5728\u56de\u5f52\u7ebf\u9644\u8fd1\u7684\u5927\u9646\u5185\u90e8\u548c\u897f\u5cb8\u3002 \u5178\u578b\u5730\u533a:\u6492\u54c8\u62c9\u3001\u963f\u62c9\u4f2f\u534a\u5c9b\u3001\u6fb3\u5927\u5229\u4e9a\u4e2d\u897f\u90e8\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u7ec8\u5e74\u9ad8\u6e29,\u964d\u6c34\u7a00\u5c11\u3002\u690d\u88ab\u4ee5\u7eff\u6d32\u533a\u7684\u8010\u65f1\u690d\u7269\u4e3a\u4e3b\u4e9a \u70ed \u5e26\u4e9a\u70ed\u5e26 \u5b63\u98ce\u548c \u6e7f\u6da6\u6c14\u5019\u5206\u5e03\u89c4\u5f8b \u5927\u81f4\u5728\u5357\u5317\u7eac25\u00b0\u81f3\u5357\u5317\u7eac35\u3002\u4e4b\u95f4\u7684\u5927\u9646\u4e1c\u5cb8\u3002 \u5178\u578b\u5730\u533a:\u4e2d\u56fd\u5357\u65b9\u3001\u97e9\u56fd\u3001\u65e5\u672c\u5927\u90e8\u5206\u5730\u533a\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u590f\u5b63\u9ad8\u6e29\u591a\u96e8,\u51ac\u5b63\u6e29\u548c\u5c11\u96e8\u3002\u690d\u88ab\u4ee5\u5e38\u7eff\u9614\u53f6\u6797\u4e3a\u4e3b\u5730\u4e2d\u6d77 \u6c14\u5019\u5206\u5e03\u89c4\u5f8b:\u5357\u5317\u7eac30\u00b0\u81f3\u5357\u5317\u7eac40\u00b0\u4e4b\u95f4\u7684\u5927\u9646\u897f\u5cb8\u3002 \u5178\u578b\u5730\u533a:\u5730\u4e2d\u6d77\u6cbf\u5cb8\u5730\u533a\u5206\u5e03\u6700\u5e7f\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u590f\u5b63\u708e\u70ed\u5e72\u71e5,\u51ac\u5b63\u6e29\u548c\u591a\u96e8\u3002\u690d\u88ab\u4ee5\u5e38\u7eff\u786c\u53f6\u6797\u4e3a\u4e3b\u6e29 \u5e26\u6e29\u5e26 \u5b63\u98ce \u6c14\u5019\u5206\u5e03\u89c4\u5f8b:\u4e3b\u8981\u5206\u5e03\u5728\u4e9a\u6d32\u4e1c\u90e8\u7684\u4e2d\u7eac\u5ea6\u5730\u533a\u3002 \u5178\u578b\u5730\u533a:\u6211\u56fd\u5317\u65b9\u3001\u65e5\u672c\u5317\u90e8\u3001\u671d\u9c9c\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u590f\u5b63\u9ad8\u6e29\u591a\u96e8,\u51ac\u5b63\u5bd2\u51b7\u5e72\u71e5\u3002\u690d\u88ab\u4ee5\u843d\u53f6\u9614\u53f6\u6797\u548c\u9488 \u9614\u6df7\u4ea4\u6797\u4e3a\u4e3b\u6e29\u5e26 \u5927\u9646\u6027 \u6c14\u5019\u5206\u5e03\u89c4\u5f8b:\u4e3b\u8981\u5206\u5e03\u5728\u4e2d\u7eac\u5ea6\u5185\u9646\u5730\u533a\u3002 \u5178\u578b\u5730\u533a:\u4e9a\u6b27\u5927\u9646\u548c\u5317\u7f8e\u5927\u9646\u7684\u5185\u9646\u5730\u533a\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u51ac\u51b7\u590f\u70ed,\u964d\u6c34\u8f83\u5c11\u3002\u591a\u6c99\u6f20\u548c\u8349\u539f\u6e29\u5e26 \u6d77\u6d0b\u6027 \u6c14\u5019\u5206\u5e03\u89c4\u5f8b:\u4e3b\u8981\u5206\u5e03\u5728\u5357\u5317\u7eac40\u00b0\u81f3\u5357\u5317\u7eac60\u00b0\u4e4b\u95f4\u7684\u5927\u9646\u897f\u5cb8\u3002 \u5178\u578b\u5730\u533a:\u4ee5\u6b27\u6d32\u897f\u90e8\u6700\u5e7f\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u51ac\u6e29\u590f\u51c9,\u5168\u5e74\u964d\u6c34\u5747\u5300\u3002\u690d\u88ab\u4e3a\u843d\u53f6\u9614\u53f6\u6797\u5bd2\u5e26\u6c14\u5019\u5206\u5e03\u89c4\u5f8b:\u4e3b\u8981\u5206\u5e03\u5728\u6781\u5708\u4ee5\u5185\u7684\u9ad8\u7eac\u5ea6\u5730\u533a\u3002 \u5178\u578b\u5730\u533a:\u5357\u6781\u6d32\u3001\u683c\u9675\u5170\u5c9b\u53ca\u4e9a\u6b27\u5927\u9646\u548c\u5317\u7f8e\u5927\u9646\u7684\u5317\u51b0\u6d0b\u6cbf\u5cb8\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u7ec8\u5e74\u4e25\u5bd2\u5c11\u96e8\u3002\u6709\u82d4\u85d3\u3001\u5730\u8863\u7b49\u690d\u88ab\u5206\u5e03\u6216\u5b8c\u5168\u88ab\u51b0\u96ea\u8986\u76d6\u9ad8\u539f\u5c71\u5730 \u6c14\u5019\u5206\u5e03\u89c4\u5f8b:\u4e3b\u8981\u5206\u5e03\u5728\u9ad8\u5927\u7684\u9ad8\u539f\u3001\u5c71\u5730\u5730\u533a\u3002 \u5178\u578b\u5730\u533a:\u9752\u85cf\u9ad8\u539f\u3001\u5357\u7f8e\u6d32\u7684\u5b89\u7b2c\u65af\u5c71\u7b49\u3002 \u6c14\u5019\u53ca\u690d\u88ab\u7279\u70b9:\u5bd2\u51b7,\u5f88\u591a\u5730\u65b9\u7ec8\u5e74\u51b0\u96ea\u8986\u76d6,\u6c14\u5019\u5782\u76f4\u53d8\u5316\u660e\u663e\u3002\u690d \u88ab\u4e5f\u5448\u73b0\u5782\u76f4\u53d8\u5316\u7684\u7279\u70b9"},{"location":"school-notes/junior-notes/geography/#_39","title":"\u3010\u91cd\u70b9\u63d0\u9192\u3011","text":"\u975e\u6d32\u6c14\u5019\u5206\u5e03\u7684\u7279\u70b9 <p>\u57fa\u672c\u4e0a\u4ee5\u8d64\u9053\u4e3a\u4e2d\u5fc3\uff0c\u5357\u5317\u5bf9\u79f0\uff0c\u5b63\u8282\u76f8\u53cd</p> \u4e16\u754c\u4e0a\u5206\u5e03\u9762\u79ef\u6700\u5927\u7684\u6c14\u5019\u7c7b\u578b <p>\u6e29\u5e26\u5927\u9646\u6027\u6c14\u5019</p> \u9664\u5357\u6781\u6d32\u5916\u5404\u5927\u6d32\u90fd\u6709\u5206\u5e03\u7684\u6c14\u5019\u7c7b\u578b <p>\u6e29\u5e26\u5927\u9646\u6027\u6c14\u5019</p> \u4e9a\u6d32\u6ca1\u6709\u5206\u5e03\u7684\u6c14\u5019\u7c7b\u578b <p>\u70ed\u5e26\u8349\u539f\u6c14\u5019\u3001\u6e29\u5e26\u6d77\u6d0b\u6027\u6c14\u5019</p>"},{"location":"school-notes/junior-notes/geography/#_40","title":"\u4f17\u591a\u7684\u6cb3\u6e56","text":""},{"location":"school-notes/junior-notes/geography/#_41","title":"\u6cb3\u6d41\u4e0e\u6e56\u6cca","text":"<p>\u6cb3\u6d41\u88ab\u6210\u4e3a\u5927\u5730\u7684\u52a8\u8109\uff0c\u6e56\u6cca\u88ab\u8a89\u4e3a\u5927\u5730\u7684\u660e\u73e0\uff0c\u5c71\u8109\u4e3a\u5927\u5730\u7684\u9aa8\u67b6</p>"},{"location":"school-notes/junior-notes/geography/#_42","title":"\u4e16\u754c\u4e3b\u8981\u7684\u6cb3\u6d41\u4e0e\u6e56\u6cca","text":"\u4e3b\u8981\u7684\u6cb3\u6d41 \u6cb3\u6d41\u6d41\u5411\u6ce8\u5165\u7279\u70b9\u6240\u5728\u5927\u6d32\u5c3c\u7f57\u6cb3\u81ea\u5357\u5411\u5317\u6d41\u5730\u4e2d\u6d77\u4e16\u754c\u7b2c\u4e00\u957f\u6cb3\u975e\u6d32\u4e9a\u9a6c\u5b59\u6cb3\u81ea\u897f\u5411\u4e1c\u6d41\u5927\u897f\u6d0b\u4e16\u754c\u7b2c\u4e8c\u957f\u6cb3\u3001\u6d41\u91cf\u6700\u5927\u3001 \u6d41\u57df\u9762\u79ef\u6700\u5e7f\u7684\u6cb3\u6d41\u5357\u7f8e\u6d32\u957f\u6c5f\u81ea\u897f\u5411\u4e1c\u6d41\u4e1c\u6d77\u4e16\u754c\u7b2c\u4e09\u957f\u6cb3\u4e9a\u6d32\u5bc6\u897f\u897f\u6bd4\u6cb3\u81ea\u5317\u5411\u5357\u6d41\u58a8\u897f\u54e5\u6e7e\u4e16\u754c\u7b2c\u56db\u957f\u6cb3\u5317\u7f8e\u6d32\u9ec4\u6cb3\u81ea\u897f\u5411\u4e1c\u6d41\u6e24\u6d77\u542b\u6c99\u91cf\u8f83\u5927\u4e9a\u6d32\u521a\u679c\u6cb3\u6ce8:\u5404\u6bb5\u6d41\u5411\u4e0d \u4e00\u81f4\u5927\u897f\u6d0b\u4e16\u754c\u4e0a\u6c34\u80fd\u8574\u85cf\u91cf\u6700\u5927\u7684 \u6cb3\u6d41\u975e\u6d32\u591a\u7459\u6cb3\u81ea\u897f\u5411\u4e1c\u6d41\u9ed1\u6d77\u4e16\u754c\u4e0a\u6d41\u7ecf\u56fd\u5bb6\u6700\u591a\u7684\u6cb3\u6d41\u6b27\u6d32\u6e44\u516c\u6cb3\u81ea\u5317\u5411\u5357\u6d41\u5357\u6d77\u4e9a\u6d32\u6d41\u7ecf\u56fd\u5bb6\u6700\u591a\u7684\u6cb3\u6d41\u4e9a\u6d32\u83b1\u8335\u6cb3\u81ea\u5357\u5411\u5317\u6d41\u5927\u897f\u6d0b\u6b27\u6d32\u8457\u540d\u7684\u56fd\u9645\u6027\u6cb3\u6d41\u6b27\u6d32 \u4e3b\u8981\u7684\u6e56\u6cca \u6e56\u6cca\u7279\u70b9\u6240\u5728\u5927\u6d32\u91cc\u6d77\u4e16\u754c\u9762\u79ef\u6700\u5927\u7684\u54b8\u6c34\u6e56\u4e9a\u6b27\u4ea4\u754c\u82cf\u5fc5\u5229\u5c14\u6e56\u4e16\u754c\u9762\u79ef\u6700\u5927\u7684\u6de1\u6c34\u6e56\u5317\u7f8e\u6d32\u8d1d\u52a0\u5c14\u6e56\u4e16\u754c\u6700\u6df1\u7684\u6e56\u6cca\u4e9a\u6d32\u6b7b\u6d77\u4e9a\u6d32\u6d77\u62d4\u6700\u4f4e\u7684\u6e56\u6cca\u4e9a\u6d32\u9752\u6d77\u6e56\u4e2d\u56fd\u9762\u79ef\u6700\u5927\u7684\u54b8\u6c34\u6e56\u4e9a\u6d32\u9131\u9633\u6e56\u4e2d\u56fd\u9762\u79ef\u6700\u5927\u7684\u6de1\u6c34\u6e56\u4e9a\u6d32"},{"location":"school-notes/junior-notes/geography/#_43","title":"\u4e16\u754c\u4eba\u6587\u73af\u5883","text":"<pre><code>\u300a\u4eba\u6587\u5730\u7406 \u4e0a\u518c\u300b P21, P40~48\n</code></pre>"},{"location":"school-notes/junior-notes/geography/#_44","title":"\u8bed\u8a00 &amp; \u5b97\u6559","text":"\u8054\u5408\u56fd\ud83c\uddfa\ud83c\uddf3\u5de5\u4f5c\u8bed\u8a00 <p>\u6c49\u8bed\ud83c\udde8\ud83c\uddf3\u3001\u82f1\u8bed\ud83c\uddfa\ud83c\uddf8\ud83c\uddec\ud83c\udde7\u3001\u6cd5\u8bed\ud83c\uddeb\ud83c\uddf7\u3001\u4fc4\u8bed\ud83c\uddf7\ud83c\uddfa\u3001\u897f\u73ed\u7259\u8bed\ud83c\uddea\ud83c\uddf8\u3001\u963f\u62c9\u4f2f\u8bed\ud83c\uddf8\ud83c\udde6\ud83c\udde6\ud83c\uddea</p> \u4e16\u754c\u4e09\u5927\u5b97\u6559 <p>\u4f5b\u6559\ud83c\uddee\ud83c\uddf3\u3001\u57fa\u7763\u6559\ud83c\uddf5\ud83c\uddf8\u3001\u4f0a\u65af\u5170\u6559\ud83c\uddf8\ud83c\udde6</p> <p>\u7279\u8272\u4f53\u73b0</p> <p>\u4f5b\u6559\ud83c\uddee\ud83c\uddf3\uff1a\u5bfa\u5e99 &amp; \u4f5b\u5854\ud83d\uded5</p> <p>\u57fa\u7763\u6559\ud83c\uddf5\ud83c\uddf8\uff1a\u6559\u5802\u26ea\ufe0f</p> <p>\u4f0a\u65af\u5170\u6559\ud83c\uddf8\ud83c\udde6\uff1a\u6e05\u771f\u5bfa\ud83d\udd4c\ufe0f</p>"},{"location":"school-notes/junior-notes/geography/#iii","title":"\u2162. \u751f\u6d3b\u5728\u4e0d\u540c\u533a\u57df\u91cc","text":"\u5178\u578b\u56fd\u5bb6\u6c47\u603b \u7f8e\u56fd\ud83c\uddfa\ud83c\uddf8 \u7f8e\u56fd\u5546\u54c1\u519c\u4e1a\u53d1\u8fbe\u7684\u6709\u5229\u6761\u4ef6(\u539f\u56e0) <ol> <li>\u81ea\u7136\u6761\u4ef6\uff1a\u571f\u5730\u8fbd\u9614\uff0c\u5e73\u539f\u5730\u5f62\uff0c\u5730\u52bf\u4f4e\u5e73\uff0c\u571f\u58e4\u80a5\u6c83\uff1b\u6e29\u5e26\u5927\u9646\u6027\u6c14\u5019\uff0c\u6c14\u5019\u9002\u5b9c\uff1b\u5bc6\u897f\u897f\u6bd4\u6cb3\u81ea\u5317\u5411\u5357\u8d2f\u7a7f\u5e73\u539f\uff0c\u6c34\u6e90\u5145\u8db3\uff0c\u704c\u6e89\u4fbf\u5229\u3002</li> <li>\u4eba\u6587\u6761\u4ef6\uff1a\u7ecf\u6d4e\u53d1\u8fbe\uff0c\u519c\u4e1a\u79d1\u6280\u6c34\u5e73\u9ad8\uff0c\u519c\u573a\u89c4\u6a21\u5927\uff0c\u5730\u5e7f\u4eba\u7a00\uff0c\u673a\u68b0\u5316\u751f\u4ea7\uff0c\u6548\u7387\u9ad8\uff0c\u4ea7\u91cf\u5927\uff0c\u4ea7\u54c1\u50a8\u5b58\u6761\u4ef6\u597d\uff0c\u4ea4\u901a\u56db\u901a\u516b\u8fbe\u7b49\u7b49\u3002</li> </ol> \u745e\u58eb\ud83c\udde8\ud83c\udded \u745e\u58eb\u6210\u4e3a\u65c5\u6e38\u70ed\u533a\u7684\u6709\u5229\u6761\u4ef6(\u539f\u56e0) <ol> <li>\u81ea\u7136\u6761\u4ef6\uff1a<ol> <li>\u5730\u5f62\u591a\u6837\uff0c\u6d77\u62d4\u9ad8\uff0c\u6709\u51b0\u5ddd\u548c\u96ea\u5c71\uff0c\u98ce\u666f\u4f18\u7f8e\uff0c\u666f\u89c2\u5947\u7279\u3002</li> <li>\u590f\u5929\u6210\u89c2\u5149\u3001\u907f\u6691\u3001\u767b\u5c71\u80dc\u5730\uff1b\u51ac\u5929\u53d1\u5c55\u6ed1\u96ea\u8fd0\u52a8\u7684\u6761\u4ef6\u5341\u5206\u7406\u60f3\uff0c\u6e29\u6cc9\u8d44\u6e90\u4e5f\u5f88\u4e30\u5bcc\u3002</li> </ol> </li> <li>\u4eba\u6587\u6761\u4ef6\uff1a<ol> <li>\u65c5\u6e38\u5185\u5bb9\u4e30\u5bcc\u591a\u5f69\uff0c\u914d\u5957\u8bbe\u65bd\u5b8c\u5907\u3001\u7cbe\u826f\uff0c\u670d\u52a1\u5468\u5230\u3001\u7ec6\u81f4\u5165\u5fae\u7b49\u3002</li> <li>\u62e5\u6709\u53d1\u8fbe\u7684\u94c1\u8def\u548c\u516c\u8def\uff1b\u6e38\u5ba2\u4e58\u706b\u8f66\u53ef\u76f4\u63a5\u5230\u8fbe\u5c71\u5cf0\u89c2\u770b\u51b0\u5ddd\u5947\u666f\uff1b\u8bb8\u591a\u5730\u65b9\u6709\u7535\u7f06\u8f66\u76f4\u8fbe\u5c71\u5dc5\uff1b\u8fd8\u6709\u76f4\u5347\u673a\u4e3a\u9047\u5230\u5371\u9669\u7684\u6e38\u4eba\u63d0\u4f9b\u6551\u52a9\u3002</li> <li>\u6709\u53e4\u8001\u7684\u57ce\u9547\u548c\u7eaf\u6734\u7684\u4e61\u6751\u751f\u6d3b\u7b49\u3002</li> </ol> </li> </ol> \u6211\u56fd\u4e0e\u745e\u58eb\u5728\u5730\u5f62\u4e0a\u7684\u5171\u540c\u7279\u70b9 <ol> <li>\u5730\u5f62\u7c7b\u578b\u591a\u6837</li> <li>\u5c71\u533a\u9762\u79ef\u5e7f\u5927</li> </ol> \u6ce2\u65af\u6e7e\u5730\u533a\u77f3\u6cb9\u8f93\u51fa\u8def\u7ebf <p>A\u7ebf\uff1a\u6ce2\u65af\u6e7e -&gt; \u970d\u5c14\u6728\u5179\u6d77\u5ce1 -&gt; \u5370\u5ea6\u6d0b -&gt; \u9a6c\u516d\u7532\u6d77\u5ce1 -&gt; \u592a\u5e73\u6d0b -&gt; \u4e1c\u4e9a(\u4e2d\u56fd\u3001\u65e5\u672c)</p> <p>B\u7ebf\uff1a\u6ce2\u65af\u6e7e -&gt; \u970d\u5c14\u6728\u5179\u6d77\u5ce1 -&gt; \u5370\u5ea6\u6d0b -&gt; \u597d\u671b\u89d2 -&gt; \u5927\u897f\u6d0b -&gt; \u897f\u6b27\u548c\u7f8e\u56fd</p> <p>C\u7ebf\uff1a\u6ce2\u65af\u6e7e -&gt; \u970d\u5c14\u6728\u5179\u6d77\u5ce1 -&gt; \u963f\u62c9\u4f2f\u6d77 -&gt; \u66fc\u5fb7\u6d77\u5ce1 -&gt; \u7ea2\u6d77 -&gt; \u82cf\u4f0a\u58eb\u8fd0\u6cb3 -&gt; \u5730\u4e2d\u6d77 -&gt; \u76f4\u5e03\u7f57\u9640\u6d77\u5ce1 -&gt; \u5927\u897f\u6d0b -&gt; \u897f\u6b27\u548c\u7f8e\u56fd</p> <p>D\u7ebf\uff1a\u6ce2\u65af\u6e7e -&gt; \u970d\u5c14\u6728\u5179\u6d77\u5ce1 -&gt; \u5370\u5ea6\u6d0b -&gt; \u6fb3\u5927\u5229\u4e9a</p> \u6ce2\u65af\u6e7e\u5730\u533a\u4f4d\u7f6e\u7279\u5f81 <p>\u4f4d\u4e8e\u4e9a\u6d32\u897f\u90e8\uff0c\u5730\u5904\u4e9a\u3001\u6b27\u3001\u975e\u4e09\u5927\u6d32\u7684\u8fde\u63a5\u5730\u5e26\uff0c\u6fd2\u4e34\u963f\u62c9\u4f2f\u6d77\u3001\u7ea2\u6d77\u3001\u91cc\u6d77\uff0c\u9760\u8fd1\u9ed1\u6d77\u548c\u5730\u4e2d\u6d77\uff0c\u5730\u7406\u4f4d\u7f6e\u6781\u4e3a\u91cd\u8981\uff0c\u7d20\u6709\u201c\u4e09\u6d32\u4e94\u6d77\u201d\u4e4b\u79f0\u3002</p> <ol> <li> <p>\u5408\u4e3a\u4e00\u4e2a\u8981\u7d20\u00a0\u21a9</p> </li> <li> <p>\u6781\u70b9\u9664\u5916\u00a0\u21a9</p> </li> </ol>"},{"location":"school-notes/senior-high-school/sets/","title":"\u96c6\u5408","text":""},{"location":"school-notes/senior-high-school/sets/#_1","title":"\u96c6\u5408\u53ca\u57fa\u672c\u5173\u7cfb","text":""},{"location":"school-notes/senior-high-school/sets/#_2","title":"\u5b9a\u4e49","text":"<p>\u5bf9\u8c61(\u5373\u5143\u7d20)\u6240\u6784\u6210\u7684\u6574\u4f53</p>"},{"location":"school-notes/senior-high-school/sets/#_3","title":"\u8868\u793a","text":"<p>\u96c6\u5408: \u5927\u5199\u5b57\u6bcd $\\mathbb{A}, \\mathbb{B}, \\mathbb{C},...$</p> <p>\u5143\u7d20: \u5c0f\u5199\u5b57\u6bcd $a, b, c,...$</p>"},{"location":"school-notes/senior-high-school/sets/#_4","title":"\u5199\u6cd5","text":""},{"location":"school-notes/senior-high-school/sets/#_5","title":"\u6570\u96c6\u7684\u5199\u6cd5","text":"\u5217\u4e3e\u6cd5\u63cf\u8ff0\u6cd5 <p>$\\mathbb{A} = \\{a, b, c, ..., z\\}$</p> <p>$\\mathbb{A} = \\{x \\mid p(x)\\}$ <sup>1</sup></p> \u7279\u6b8a\u7684\u96c6\u5408 <p>$\\mathbb{N}$: \u81ea\u7136\u6570\u96c6</p> <p>$\\mathbb{N}_+\\ or\\ \\mathbb{N}^*$: \u6b63\u6574\u6570\u96c6</p> <p>$\\mathbb{Z}$: \u6574\u6570\u96c6</p> <p>$\\mathbb{Q}$: \u6709\u7406\u6570\u96c6</p> <p>$\\mathbb{R}$: \u5b9e\u6570\u96c6</p> <p>$\\mathbb{C}$: \u590d\u6570\u96c6</p>"},{"location":"school-notes/senior-high-school/sets/#_6","title":"\u5173\u7cfb\u7684\u5199\u6cd5","text":"\u5143\u7d20\u4e0e\u96c6\u5408\u7684\u5173\u7cfb\u96c6\u5408\u4e0e\u96c6\u5408\u7684\u5173\u7cfb <p>\u5c5e\u4e8e: $a \\in \\mathbb{A}$</p> <p>\u4e0d\u5c5e\u4e8e: $b \\notin \\mathbb{A}$</p> <p>\u5b50\u96c6: $\\mathbb{B} \\subseteq \\mathbb{A} \\iff \\mathbb{A} \\supseteq \\mathbb{B} $</p> <p>\u76f8\u7b49: $\\mathbb{A} = \\mathbb{B}$</p> <p>\u771f\u5b50\u96c6: $\\mathbb{B} \\subsetneqq \\mathbb{A} \\iff \\mathbb{A} \\supsetneqq \\mathbb{B} $</p>"},{"location":"school-notes/senior-high-school/sets/#_7","title":"\u6570\u96c6 &amp; \u70b9\u96c6","text":"<p>\u6570\u96c6\uff0c\u8868\u8303\u56f4: $\\mathbb{A} = \\{x \\mid p(x)\\}$</p> <p>\u70b9\u96c6\uff0c\u8868\u56fe\u50cf: $\\mathbb{B} = \\{(x, y) \\mid y = x^2 \\}$</p>"},{"location":"school-notes/senior-high-school/sets/#_8","title":"\u96c6\u5408\u95f4\u7684\u8fd0\u7b97\u53ca\u8fd0\u7528","text":"\u4ea4\u96c6\u5e76\u96c6\u8865\u96c6 <p>$\\mathbb{A} \\cap \\mathbb{B} = \\{x \\mid x \\in \\mathbb{A}\\ and\\ x \\in \\mathbb{B}\\}$</p> <p>\u5373\u5bf9\u96c6\u5408\u8fdb\u884c \"\u4e0e $\\land$\" \u64cd\u4f5c</p> <p>$\\mathbb{A} \\cup \\mathbb{B} = \\{x \\mid x \\in \\mathbb{A}\\ or\\ x \\in \\mathbb{B}\\}$</p> <p>\u5373\u5bf9\u96c6\u5408\u8fdb\u884c \"\u6216 $\\lor$\" \u64cd\u4f5c</p> <p>$\\complement_\\mathbb{U} \\mathbb{A} = \\{x \\mid x \\in \\mathbb{U}\\ and\\ x \\notin \\mathbb{A}\\}$</p> \u8fd0\u7b97\u53d8\u5f62 &amp; \u6027\u8d28 \u5e76\u96c6\u7684\u6027\u8d28\u8865\u96c6\u7684\u6027\u8d28 <p>$\\mathbb{A} \\cup \\emptyset = \\mathbb{A}$</p> <p>$(\\mathbb{A} \\cup \\mathbb{B}) \\supseteq \\mathbb{A}$</p> <p>$\\mathbb{A} \\cup \\mathbb{B} \\iff \\mathbb{B} \\subseteq \\mathbb{A}$</p> <p>$\\complement_\\mathbb{U} \\mathbb{U} = \\emptyset$</p> <p>$\\complement_\\mathbb{U} \\emptyset = \\mathbb{U}$</p> <p>$\\complement_\\mathbb{U} (\\complement_\\mathbb{U} \\mathbb{A}) = \\mathbb{A}$</p> <p>$\\mathbb{A} \\cup (\\complement_\\mathbb{U} \\mathbb{A}) = \\mathbb{U}$</p> <p>$\\mathbb{A} \\cap (\\complement_\\mathbb{U} \\mathbb{A}) = \\emptyset$</p> <ol> <li> <p>\u9ed8\u8ba4 $x \\in \\mathbb{R}$\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2024/#2024","title":"2024","text":""},{"location":"blog/category/ai/","title":"Ai","text":""},{"location":"blog/category/ai/#ai","title":"AI","text":""}]}